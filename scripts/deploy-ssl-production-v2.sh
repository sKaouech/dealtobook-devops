#!/bin/bash
set -euo pipefail

# üéØ Script de d√©ploiement avec SSL/HTTPS pour Hostinger - Version 2.0
# G√®re DNS, certificats SSL, et d√©ploiement complet avec flexibilit√© maximale

# D√©terminer le r√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DEVOPS_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
CONFIG_DIR="$DEVOPS_DIR/config"
# Les services sont au niveau workspace (parent de dealtobook-devops)
WORKSPACE_ROOT="$(cd "$DEVOPS_DIR/.." && pwd)"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly NC='\033[0m' # No Color

# Configuration - UTILISEZ DES VARIABLES D'ENVIRONNEMENT POUR LES SECRETS !
GITHUB_USERNAME="${GITHUB_USERNAME:-skaouech}"
REGISTRY="${REGISTRY:-ghcr.io}"
CR_PAT="${CR_PAT:-}"
CUSTOM_TAG="${CUSTOM_TAG:-}"  # Tag personnalis√© pour les images

# Environnement (development ou production)
DEPLOY_ENV="${DEPLOY_ENV:-production}"

# Timeouts configurables
DB_READY_TIMEOUT="${DB_READY_TIMEOUT:-60}"
KEYCLOAK_READY_TIMEOUT="${KEYCLOAK_READY_TIMEOUT:-90}"
SERVICE_STABILIZATION_TIMEOUT="${SERVICE_STABILIZATION_TIMEOUT:-30}"

# Configuration bas√©e sur l'environnement
if [[ "$DEPLOY_ENV" == "development" ]]; then
    HOSTINGER_IP="${HOSTINGER_DEV_HOST:-148.230.114.13}"
    HOSTINGER_USER="${HOSTINGER_DEV_USER:-root}"
    PROJECT_NAME="dealtobook-dev"
    DOCKER_COMPOSE_FILE="$CONFIG_DIR/docker-compose.ssl-complete.yml"
    DOCKER_COMPOSE_REMOTE="docker-compose.ssl-complete.yml"  # Nom sur le serveur distant
    ENV_FILE="$CONFIG_DIR/dealtobook-ssl-dev.env"
    IMAGE_TAG="${CUSTOM_TAG:-develop}"
    DOMAINS=("administration-dev.dealtobook.com" "website-dev.dealtobook.com" "keycloak-dev.dealtobook.com")
else
    HOSTINGER_IP="${HOSTINGER_PROD_HOST:-148.230.114.13}"
    HOSTINGER_USER="${HOSTINGER_PROD_USER:-root}"
    PROJECT_NAME="dealtobook"
    DOCKER_COMPOSE_FILE="$CONFIG_DIR/docker-compose.ssl-complete.yml"
    DOCKER_COMPOSE_REMOTE="docker-compose.ssl-complete.yml"  # Nom sur le serveur distant
    ENV_FILE="$CONFIG_DIR/dealtobook-ssl.env"
    IMAGE_TAG="${CUSTOM_TAG:-latest}"
    DOMAINS=("administration.dealtobook.com" "website.dealtobook.com" "keycloak.dealtobook.com")
fi

# Microservices configuration
BACKEND_SERVICES_DIRS=("deal_generator" "deal_security" "deal_setting")
BACKEND_SERVICES_IMAGES=("dealdealgenerator" "dealsecurity" "dealsetting")

FRONTEND_SERVICES_DIRS=("deal_webui" "deal_website")
FRONTEND_SERVICES_IMAGES=("dealtobook-deal-webui" "dealtobook-deal-website")

# Services sp√©cifiques (peut √™tre modifi√© par les arguments)
SPECIFIC_SERVICES=()
BUILD_SPECIFIC_SERVICES=false

# Service mapping centralis√© (DRY principle)
# Compatible avec bash 3.x (macOS par d√©faut)

# Logging functions
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå ERROR: $1${NC}" >&2
    exit 1
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  WARNING: $1${NC}"
}

info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# Map service name to docker-compose service name
# Compatible bash 3.x avec case statement
map_service_name() {
    local service="$1"
    
    case "$service" in
        # Backend services
        deal_generator|dealdealgenerator|generator)
            echo "deal-generator"
            ;;
        deal_security|dealsecurity|security)
            echo "deal-security"
            ;;
        deal_setting|dealsetting|setting)
            echo "deal-setting"
            ;;
        
        # Frontend services
        deal_webui|dealtobook-deal-webui|webui|admin)
            echo "deal-webui"
            ;;
        deal_website|dealtobook-deal-website|website)
            echo "deal-website"
            ;;
        
        # Infrastructure
        postgres|postgresql|db)
            echo "postgres"
            ;;
        keycloak)
            echo "keycloak"
            ;;
        nginx)
            echo "nginx"
            ;;
        redis)
            echo "redis"
            ;;
        zipkin)
            echo "zipkin"
            ;;
        prometheus)
            echo "prometheus"
            ;;
        grafana)
            echo "grafana"
            ;;
        
        # Default: return as-is
        *)
            echo "$service"
            ;;
    esac
}

# Parse specific services from arguments
parse_services() {
    local services_arg="$1"
    if [[ -n "$services_arg" ]]; then
        BUILD_SPECIFIC_SERVICES=true
        IFS=',' read -ra SPECIFIC_SERVICES <<< "$services_arg"
        log "üéØ Services sp√©cifiques s√©lectionn√©s: ${SPECIFIC_SERVICES[*]}"
    fi
}

# Check if a service should be processed
should_process_service() {
    local service="$1"
    if [[ "$BUILD_SPECIFIC_SERVICES" == "false" ]]; then
        return 0  # Process all services
    fi
    
    for specific_service in "${SPECIFIC_SERVICES[@]}"; do
        if [[ "$service" == "$specific_service" ]]; then
            return 0  # Process this service
        fi
    done
    return 1  # Skip this service
}

# Get mapped services list for docker-compose commands
get_mapped_services_list() {
    local services_list=""
    # V√©rifier si le tableau n'est pas vide (compatibilit√© avec set -u)
    if [ ${#SPECIFIC_SERVICES[@]} -gt 0 ]; then
        for service in "${SPECIFIC_SERVICES[@]}"; do
            local mapped=$(map_service_name "$service")
            services_list+=" $mapped"
        done
    fi
    echo "$services_list"
}

# Configure Java 17 for JHipster compatibility
setup_java17() {
    log "üîß Configuration de Java 17..."
    
    if /usr/libexec/java_home -v 17 >/dev/null 2>&1; then
        export JAVA_HOME=$(/usr/libexec/java_home -v 17)
        export PATH="$JAVA_HOME/bin:$PATH"
        success "Java 17 configur√©: $JAVA_HOME"
        java -version
    else
        error "Java 17 non trouv√©. Veuillez installer Java 17 (JDK 11-18 requis pour JHipster)"
    fi
}

# Execute remote SSH command
run_remote_cmd() {
    ssh -o StrictHostKeyChecking=no "${HOSTINGER_USER}@${HOSTINGER_IP}" "$1"
}

# Helper: retry command with backoff
retry_with_backoff() {
  local max_retries="$1"; shift
  local delay="$1"; shift
  local attempt=1
  while true; do
    "$@" && return 0
    if [ "$attempt" -ge "$max_retries" ]; then
      return 1
    fi
    sleep "$delay"
    attempt=$((attempt+1))
    delay=$((delay*2))
  done
}

# Check prerequisites
check_prerequisites() {
    local skip_ssh=${1:-false}
    log "üîç V√©rification des pr√©requis..."
    
    # Setup Java 17 first
    setup_java17
    
    # Check required tools
    local required_tools=("docker" "docker-compose" "ssh" "scp")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            error "$tool n'est pas install√©"
        fi
    done
    
    # V√©rifier les variables d'environnement pour GHCR
    if [ -n "$CR_PAT" ]; then
        info "Token GHCR d√©tect√© - build et push vers GHCR activ√©s"
    else
        warning "Variable CR_PAT non d√©finie - utilisation des images locales uniquement"
    fi
    
    # V√©rifier SSH vers Hostinger (sauf pour build local)
    if [ "$skip_ssh" != "true" ]; then
        if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 "${HOSTINGER_USER}@${HOSTINGER_IP}" "echo 'SSH OK'" &> /dev/null; then
            error "Impossible de se connecter √† Hostinger via SSH"
        fi
    fi
    
    success "Pr√©requis valid√©s"
}

# Login to GitHub Container Registry
login_to_ghcr() {
    if [ -n "$CR_PAT" ]; then
        log "üîë Connexion √† GitHub Container Registry..."
        echo "$CR_PAT" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin || error "√âchec de la connexion √† GHCR"
        success "Connect√© √† GHCR"
    else
        warning "CR_PAT non d√©fini - pas de connexion GHCR"
    fi
}

# Check SSL certificates
check_ssl_certificates() {
    log "üîí V√©rification des certificats SSL..."
    
    local all_valid=true
    for domain in "${DOMAINS[@]}"; do
        log "  V√©rification du certificat pour ${domain}..."
        if run_remote_cmd "test -f /etc/letsencrypt/live/${domain}/fullchain.pem"; then
            success "  ‚úÖ Certificat SSL trouv√© pour ${domain}"
        else
            warning "  ‚ö†Ô∏è  Certificat SSL manquant pour ${domain}"
            all_valid=false
        fi
    done
    
    if [ "$all_valid" = true ]; then
        success "üîí Tous les certificats SSL sont pr√©sents"
        return 0
    else
        return 1
    fi
}

# Setup SSL certificates
setup_ssl_certificates() {
    log "üîí Configuration des certificats SSL avec Let's Encrypt..."
    
    # Arr√™ter les services qui utilisent les ports 80/443
    run_remote_cmd "docker stop ${PROJECT_NAME}-nginx 2>/dev/null || true"
    run_remote_cmd "systemctl stop nginx 2>/dev/null || true"
    
    # Installer Certbot si n√©cessaire
    run_remote_cmd "apt update && apt install -y certbot python3-certbot-nginx"
    
    # Configuration Nginx temporaire pour Certbot
    local temp_nginx_config='events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        server_name '
    
    # Ajouter les domaines dynamiquement
    temp_nginx_config+="${DOMAINS[@]};"
    
    temp_nginx_config+='
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$host$request_uri;
        }
    }
}'
    
    run_remote_cmd "cat > /tmp/nginx-temp.conf << 'EOF'
$temp_nginx_config
EOF"
    
    # D√©marrer Nginx temporaire
    run_remote_cmd "mkdir -p /var/www/certbot"
    run_remote_cmd "cp /tmp/nginx-temp.conf /etc/nginx/nginx.conf"
    run_remote_cmd "systemctl start nginx"
    
    # Obtenir les certificats
    local domain_args=""
    for domain in "${DOMAINS[@]}"; do
        domain_args+=" -d $domain"
    done
    
    run_remote_cmd "certbot --nginx $domain_args --non-interactive --agree-tos --email admin@dealtobook.com --expand"
    
    # Arr√™ter Nginx syst√®me
    run_remote_cmd "systemctl stop nginx && systemctl disable nginx"
    
    success "üîí Certificats SSL configur√©s avec succ√®s"
}

# Build backend services
build_backend_services() {
    log "üèóÔ∏è Construction des services backend avec JIB..."
    
    local build_failed=false
    for i in "${!BACKEND_SERVICES_DIRS[@]}"; do
        local service_key="${BACKEND_SERVICES_DIRS[$i]}"
        local image_name="${BACKEND_SERVICES_IMAGES[$i]}"
        local service_dir="$WORKSPACE_ROOT/dealtobook-${service_key}"
        
        # V√©rifier si ce service doit √™tre trait√©
        if ! should_process_service "$service_key" && ! should_process_service "$image_name"; then
            info "‚è≠Ô∏è Service $service_key ignor√© (non sp√©cifi√©)"
            continue
        fi
        
        if [ -d "$service_dir" ]; then
            log "  Building $service_key ‚Üí $image_name..."
            
            (cd "$service_dir" && {
                if [ -n "$CR_PAT" ]; then
                    local image_name_lower=$(echo "$GITHUB_USERNAME/$image_name" | tr '[:upper:]' '[:lower:]')
                    
                    # Build avec JIB et push vers GHCR (avec retry et timeout augment√©)
                    retry_with_backoff 3 5 \
                      ./mvnw -ntp compile jib:build -Pprod -DskipTests \
                        -Djib.httpTimeout=120000 \
                        -Djib.to.image="$REGISTRY/$image_name_lower:$IMAGE_TAG" \
                        -Djib.to.auth.username="$GITHUB_USERNAME" \
                        -Djib.to.auth.password="$CR_PAT" \
                    || { error "  ‚ùå JIB build failed for $service_key"; build_failed=true; }
                    
                    # Tag avec SHA pour tra√ßabilit√© (best-effort)
                    local commit_sha=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
                    docker tag "$REGISTRY/$image_name_lower:$IMAGE_TAG" \
                              "$REGISTRY/$image_name_lower:$IMAGE_TAG-$commit_sha" 2>/dev/null || true
                    retry_with_backoff 3 5 docker push "$REGISTRY/$image_name_lower:$IMAGE_TAG-$commit_sha" 2>/dev/null || true
                else
                    retry_with_backoff 3 5 \
                      ./mvnw -ntp compile jib:dockerBuild -Pprod -DskipTests \
                      -Djib.httpTimeout=120000 \
                    || { error "  ‚ùå JIB build failed for $service_key"; build_failed=true; }
                fi
            }) || { error "Build failed for $service_key"; build_failed=true; }
            
            [ "$build_failed" = false ] && success "  Service $service_key construit et pouss√©"
        else
            warning "  R√©pertoire $service_dir non trouv√©"
        fi
    done
    
    if [ "$build_failed" = true ]; then
        error "Un ou plusieurs builds ont √©chou√©"
    fi
}

# Build frontend services
build_frontend_services() {
    log "üåê Construction des services frontend..."
    
    local build_failed=false
    for i in "${!FRONTEND_SERVICES_DIRS[@]}"; do
        local service_key="${FRONTEND_SERVICES_DIRS[$i]}"
        local image_name="${FRONTEND_SERVICES_IMAGES[$i]}"
        local service_dir="$WORKSPACE_ROOT/dealtobook-${service_key}"
        
        if ! should_process_service "$service_key" && ! should_process_service "$image_name"; then
            info "‚è≠Ô∏è Service $service_key ignor√© (non sp√©cifi√©)"
            continue
        fi
        
        if [ -d "$service_dir" ]; then
            log "  Building $service_key ‚Üí $image_name..."
            
            # D√©terminer le Dockerfile √† utiliser
            local dockerfile="Dockerfile"
            if [ -f "$service_dir/Dockerfile2" ] && [ "$service_key" = "deal_webui" ]; then
                dockerfile="Dockerfile2"
            elif [ -f "$service_dir/Dockerfile" ]; then
                dockerfile="Dockerfile"
            else
                warning "  Aucun Dockerfile trouv√© pour $service_key"
                continue
            fi
            
            if [ -n "$CR_PAT" ]; then
                local image_name_lower=$(echo "$GITHUB_USERNAME/$image_name" | tr '[:upper:]' '[:lower:]')
                
                retry_with_backoff 3 5 docker build --platform linux/amd64 -t "$REGISTRY/$image_name_lower:$IMAGE_TAG" -f "$service_dir/$dockerfile" "$service_dir/" \
                  || { error "  ‚ùå Docker build failed for $service_key"; build_failed=true; }
                
                retry_with_backoff 3 5 docker push "$REGISTRY/$image_name_lower:$IMAGE_TAG" \
                  || { error "  ‚ùå Docker push failed for $service_key"; build_failed=true; }
                
                local commit_sha=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
                docker tag "$REGISTRY/$image_name_lower:$IMAGE_TAG" "$REGISTRY/$image_name_lower:$IMAGE_TAG-$commit_sha" 2>/dev/null || true
                retry_with_backoff 3 5 docker push "$REGISTRY/$image_name_lower:$IMAGE_TAG-$commit_sha" 2>/dev/null || true
            else
                retry_with_backoff 3 5 docker build --platform linux/amd64 -t "$image_name:latest" -f "$service_dir/$dockerfile" "$service_dir/" \
                  || { error "  ‚ùå Docker build failed for $service_key"; build_failed=true; }
            fi
            
            [ "$build_failed" = false ] && success "  Service $service_key construit"
        else
            warning "  R√©pertoire $service_dir non trouv√©"
        fi
    done
    
    if [ "$build_failed" = true ]; then
        error "Un ou plusieurs builds ont √©chou√©"
    fi
}

# Deploy configuration to Hostinger
deploy_to_hostinger() {
    log "üöÄ D√©ploiement sur Hostinger..."
    
    # Cr√©er le r√©pertoire de projet sur Hostinger
    run_remote_cmd "mkdir -p /opt/${PROJECT_NAME}/{nginx,monitoring/grafana/provisioning/{datasources,dashboards},scripts,keycloak-themes}"
    
    # Transf√©rer les fichiers de configuration
    log "  Transfert des fichiers de configuration..."
    
    # Cr√©er une copie temporaire du docker-compose avec le bon tag d'image
    local temp_compose=$(mktemp /tmp/docker-compose-XXXXXX.yml)
    log "  üè∑Ô∏è  Application du tag d'image '$IMAGE_TAG' au docker-compose..."
    
    # Remplacer :latest par :$IMAGE_TAG dans les images d'application (pas pour les images de base comme postgres, nginx, etc.)
    sed -E "s|(ghcr\.io/[^:]+):latest|\1:${IMAGE_TAG}|g" "$DOCKER_COMPOSE_FILE" > "$temp_compose" || error "Failed to update image tags"
    
    # V√©rifier que les remplacements ont bien √©t√© effectu√©s
    if grep -q ":${IMAGE_TAG}" "$temp_compose"; then
        log "  ‚úÖ Tags d'image mis √† jour: $(grep -E 'ghcr\.io.*:'"${IMAGE_TAG}" "$temp_compose" | wc -l | tr -d ' ') images utilisent le tag '$IMAGE_TAG'"
    else
        warning "  ‚ö†Ô∏è  Aucun tag remplac√© - v√©rification..."
        grep -E "ghcr\.io.*:latest" "$temp_compose" || true
    fi
    
    scp -o StrictHostKeyChecking=no "$temp_compose" "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/${DOCKER_COMPOSE_REMOTE}" || error "Failed to transfer docker-compose"
    rm -f "$temp_compose"
    scp -o StrictHostKeyChecking=no "$ENV_FILE" "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/.env" || error "Failed to transfer .env file"
    
    # Transf√©rer les scripts PostgreSQL (postgresql.conf, pg_hba.conf, init-multiple-databases.sh, etc.)
    if [ -d "$CONFIG_DIR/scripts" ] && [ "$(ls -A $CONFIG_DIR/scripts 2>/dev/null)" ]; then
        log "  Transfert des scripts PostgreSQL..."
        # Cr√©er le r√©pertoire scripts sur le serveur distant d'abord
        run_remote_cmd "mkdir -p /opt/${PROJECT_NAME}/scripts && chmod 755 /opt/${PROJECT_NAME}/scripts" || true
        
        # Supprimer les anciens r√©pertoires qui auraient pu √™tre cr√©√©s par erreur (bug de transfert pr√©c√©dent)
        log "    Nettoyage des anciens r√©pertoires incorrects..."
        run_remote_cmd "cd /opt/${PROJECT_NAME}/scripts && {
            # Supprimer tout ce qui est un r√©pertoire mais devrait √™tre un fichier
            for item in pg_hba.conf postgresql.conf init-multiple-databases.sh; do
                [ -d \$item ] && echo \"  Suppression du r√©pertoire erron√©: \$item\" && rm -rf \$item || true
            done
        }" || true
        
        # Transf√©rer les fichiers UN PAR UN pour √©viter les probl√®mes de r√©pertoires
        local postgres_files=("pg_hba.conf" "postgresql.conf" "init-multiple-databases.sh" "99-copy-pg-hba.sh" "postgres-entrypoint.sh")
        for file in "${postgres_files[@]}"; do
            if [ -f "$CONFIG_DIR/scripts/$file" ]; then
                log "    Transfert de $file..."
                scp -o StrictHostKeyChecking=no "$CONFIG_DIR/scripts/$file" "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/scripts/$file" || warning "Failed to transfer $file"
                # S'assurer que c'est un fichier et non un r√©pertoire
                run_remote_cmd "cd /opt/${PROJECT_NAME}/scripts && [ -f $file ] && chmod 644 $file 2>/dev/null || rm -rf $file" || true
            fi
        done
        
        # S'assurer que les scripts sont ex√©cutables
        run_remote_cmd "chmod +x /opt/${PROJECT_NAME}/scripts/*.sh 2>/dev/null || true" || true
        
        # V√©rification finale
        run_remote_cmd "cd /opt/${PROJECT_NAME}/scripts && echo 'üìã Fichiers transf√©r√©s:' && ls -lh *.conf *.sh 2>/dev/null | head -10" || true
    fi
    
    # Transf√©rer les r√©pertoires de configuration
    local config_dirs=("nginx" "monitoring" "keycloak-themes")
    for dir in "${config_dirs[@]}"; do
        local config_path="$CONFIG_DIR/$dir"
        if [ -d "$config_path" ]; then
            scp -r -o StrictHostKeyChecking=no "$config_path/" "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/" || warning "Failed to transfer $dir"
        else
            warning "  R√©pertoire $config_path non trouv√©"
        fi
    done
    
    # Transf√©rer les scripts si n√©cessaire
    if [ -d "$SCRIPT_DIR" ]; then
        scp -r -o StrictHostKeyChecking=no "$SCRIPT_DIR/" "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/scripts" || warning "Failed to transfer scripts"
    fi
    
    success "Configuration transf√©r√©e"
}

# Pull images on remote server
pull_images_on_hostinger() {
    log "üîÑ Pull des images Docker sur Hostinger..."
    
    if [ -z "$CR_PAT" ]; then
        warning "CR_PAT non d√©fini - impossible de pull les images"
        return 0
    fi
    
    log "  üè∑Ô∏è  Pull des images avec le tag '$IMAGE_TAG'..."
    
    # Liste des services avec leurs images correspondantes
    local services_to_pull=$(get_mapped_services_list)
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        echo '$CR_PAT' | docker login ghcr.io -u '$GITHUB_USERNAME' --password-stdin
        
        # Pull explicite des images d'application avec le bon tag pour forcer le t√©l√©chargement
        echo \"üì• Pull explicite des images avec tag ${IMAGE_TAG}...\"
        
        # Pull explicite de chaque image avec le bon tag
        for image_suffix in dealdealgenerator dealsecurity dealsetting dealtobook-deal-webui dealtobook-deal-website; do
            image=\"ghcr.io/${GITHUB_USERNAME}/\${image_suffix}:${IMAGE_TAG}\"
            echo \"  üì• Pull de \$image...\"
            docker pull \"\$image\" || echo \"  ‚ö†Ô∏è  √âchec du pull de \$image (peut d√©j√† √™tre pr√©sent localement)\"
        done
        
        # Ensuite, pull via docker-compose pour s'assurer que tout est synchronis√©
        if [ '$BUILD_SPECIFIC_SERVICES' = 'true' ]; then
            echo 'üéØ Pull via docker-compose des services sp√©cifiques:$services_to_pull'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env pull$services_to_pull
        else
            echo 'üì• Pull via docker-compose de tous les services...'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env pull
        fi
    }" || warning "Erreur lors du pull des images"
    
    success "Images t√©l√©charg√©es"
}

# Start services on Hostinger
start_services_on_hostinger() {
    log "üîÑ D√©marrage des services sur Hostinger..."
    
    local services_list=$(get_mapped_services_list)
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        # Login to GHCR if available
        if [ -n '$CR_PAT' ]; then
            echo '$CR_PAT' | docker login ghcr.io -u '$GITHUB_USERNAME' --password-stdin
        fi
    
        # Cr√©er le r√©seau Docker
        docker network create dealtobook-network 2>/dev/null || true
    
        # D√©marrer les services
        if [ '$BUILD_SPECIFIC_SERVICES' = 'true' ]; then
            echo 'üéØ D√©marrage des services sp√©cifiques:$services_list'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate --pull always$services_list || \
                docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate$services_list
        else
            # D√©marrage s√©quentiel des services pour √©viter les conflits de d√©pendances
            echo 'üöÄ D√©marrage s√©quentiel des services avec force-recreate...'
            
            # Arr√™ter tous les services d'abord et supprimer les conteneurs
            echo 'üõë Arr√™t et suppression des services existants...'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env down --remove-orphans 2>/dev/null || true
            # Forcer la suppression des conteneurs orphelins qui bloquent (compatible macOS/Linux)
            for container in \$(docker ps -a --filter 'name=dealtobook-' --format '{{.Names}}' 2>/dev/null); do
                [ -n \"\$container\" ] && docker rm -f \"\$container\" 2>/dev/null || true
            done
            sleep 2
            
            # 1. Infrastructure de base (uniquement les services actifs dans docker-compose)
            echo 'üìä D√©marrage de l infrastructure...'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate --pull always postgres zipkin || \
                docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate postgres zipkin
            
            # Attendre que PostgreSQL soit pr√™t
            echo '‚è≥ Attente de PostgreSQL...'
            for i in {1..30}; do
                docker exec dealtobook-postgres pg_isready -U dealtobook >/dev/null 2>&1 && break
                sleep 2
            done
            
            # V√©rifier et corriger les fichiers scripts (certains peuvent √™tre des r√©pertoires)
            echo 'üîç V√©rification des fichiers scripts...'
            
            # Si pg_hba.conf est un r√©pertoire (bug pr√©c√©dent), le supprimer
            if [ -d scripts/pg_hba.conf ]; then
                echo '   ‚ö†Ô∏è  scripts/pg_hba.conf est un R√âPERTOIRE, suppression...'
                rm -rf scripts/pg_hba.conf
                echo '   ‚ÑπÔ∏è  Le fichier sera recr√©√© au prochain d√©ploiement ou copi√© avec docker cp'
            fi
            
            if [ -f scripts/pg_hba.conf ]; then
                echo '   ‚úì scripts/pg_hba.conf trouv√© (fichier)'
            elif [ -d scripts/pg_hba.conf ]; then
                echo '   ‚ùå scripts/pg_hba.conf est toujours un r√©pertoire apr√®s correction !'
            else
                echo '   ‚ùå scripts/pg_hba.conf NON TROUV√â !'
                echo '   üìÇ Contenu de scripts/:'
                ls -la scripts/ 2>/dev/null | head -10
            fi
            
            # APPLIQUER pg_hba.conf personnalis√© depuis le serveur distant
            echo 'üîß Application de pg_hba.conf personnalis√©...'
            # Si le fichier n'est pas mont√©, le copier directement depuis le serveur
            if ! docker exec dealtobook-postgres test -f /tmp/pg_hba_custom.conf 2>/dev/null; then
                echo '   ‚ö†Ô∏è  /tmp/pg_hba_custom.conf non mont√©, copie depuis le serveur...'
                if [ -f scripts/pg_hba.conf ]; then
                    echo '   üìã Copie de scripts/pg_hba.conf vers le conteneur...'
                    docker cp scripts/pg_hba.conf dealtobook-postgres:/tmp/pg_hba_custom.conf 2>/dev/null && \
                        echo '   ‚úÖ Fichier copi√© dans le conteneur' || \
                        echo '   ‚ùå √âchec de la copie manuelle'
                elif [ -d scripts/pg_hba.conf ]; then
                    echo '   ‚ùå scripts/pg_hba.conf est un r√©pertoire, impossible de copier !'
                    echo '   üí° Solution: Relancer le d√©ploiement pour retransf√©rer le fichier correctement'
                else
                    echo '   ‚ùå scripts/pg_hba.conf non trouv√© sur le serveur'
                fi
            fi
            
            if docker exec dealtobook-postgres test -f /tmp/pg_hba_custom.conf 2>/dev/null; then
                echo '   üìã Copie de pg_hba.conf personnalis√©...'
                docker exec dealtobook-postgres cp -f /tmp/pg_hba_custom.conf /var/lib/postgresql/data/pg_hba.conf 2>/dev/null || true
                docker exec dealtobook-postgres chmod 600 /var/lib/postgresql/data/pg_hba.conf 2>/dev/null || true
                echo '   üîÑ Rechargement de la configuration PostgreSQL...'
                docker exec dealtobook-postgres psql -U dealtobook -d postgres -c 'SELECT pg_reload_conf();' 2>/dev/null || \
                    docker exec dealtobook-postgres psql -U postgres -d postgres -c 'SELECT pg_reload_conf();' 2>/dev/null || true
                echo '   ‚úÖ pg_hba.conf appliqu√© et recharg√©'
            else
                echo '   ‚ö†Ô∏è  Fichier /tmp/pg_hba_custom.conf non trouv√© dans le conteneur'
            fi
            
            # Cr√©er la base de donn√©es Keycloak si elle n'existe pas (AVANT de d√©marrer Keycloak)
            echo 'üóÑÔ∏è  V√©rification de la base de donn√©es Keycloak...'
            docker exec dealtobook-postgres psql -U dealtobook -d postgres -c 'SELECT 1 FROM pg_database WHERE datname='\''keycloak'\'';' 2>/dev/null | grep -q 1 || \
                docker exec dealtobook-postgres psql -U dealtobook -d postgres -c 'CREATE DATABASE keycloak;' 2>/dev/null || \
                docker exec dealtobook-postgres psql -U postgres -c 'CREATE DATABASE keycloak;' 2>/dev/null || true
            sleep 5
            
            # 2. Keycloak
            echo 'üîê D√©marrage de Keycloak...'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate --pull always keycloak || \
                docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate keycloak
            
            # V√©rifier que Keycloak d√©marre correctement
            echo '‚è≥ Attente du d√©marrage de Keycloak...'
            sleep 15
            if ! docker ps --filter 'name=dealtobook-keycloak' --format '{{.Names}}' | grep -q 'dealtobook-keycloak'; then
                echo '‚ö†Ô∏è  Keycloak n est pas d√©marr√©. Affichage des logs :'
                docker logs dealtobook-keycloak --tail 50 2>&1 || true
            else
                echo '‚úÖ Keycloak est d√©marr√©'
            fi
            sleep 5
            
            # 3. Services backend
            echo '‚öôÔ∏è D√©marrage des services backend...'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate --pull always deal-generator deal-security deal-setting || \
                docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate deal-generator deal-security deal-setting
            sleep 20
            
            # 4. Services frontend
            echo 'üåê D√©marrage des services frontend...'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate --pull always deal-webui deal-website || \
                docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate deal-webui deal-website
            sleep 10
            
            # 5. Nginx
            echo 'üîÑ D√©marrage de Nginx...'
            docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate --pull always nginx || \
                docker-compose -f docker-compose.ssl-complete.yml --env-file .env up -d --force-recreate nginx
            
            echo '‚úÖ Tous les services d√©marr√©s s√©quentiellement'
        fi
        
        echo 'Services d√©marr√©s'
    }" || error "√âchec du d√©marrage des services"
    
    success "Services d√©marr√©s sur Hostinger"
}

# Stop services on Hostinger
stop_services_on_hostinger() {
    log "üõë Arr√™t des services sur Hostinger..."
    
    local services_list=$(get_mapped_services_list)
    
    if [ "$BUILD_SPECIFIC_SERVICES" = "true" ]; then
        log "üéØ Arr√™t des services sp√©cifiques:$services_list"
        run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env stop$services_list"
    else
        run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env stop"
    fi
    
    success "Services arr√™t√©s"
}

# Restart services on Hostinger
restart_services_on_hostinger() {
    log "üîÑ Red√©marrage des services sur Hostinger..."
    
    local services_list=$(get_mapped_services_list)
    
    if [ "$BUILD_SPECIFIC_SERVICES" = "true" ]; then
        log "üéØ Red√©marrage des services sp√©cifiques:$services_list"
        run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env restart$services_list"
    else
        run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env restart"
    fi
    
    success "Services red√©marr√©s"
}

# Scale services
scale_services() {
    local service="$1"
    local replicas="${2:-1}"
    
    log "üìà Scaling service $service to $replicas replicas..."
    
    local mapped_service=$(map_service_name "$service")
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env up -d --scale $mapped_service=$replicas"
    
    success "Service $service scaled to $replicas"
}

# Execute command in service container
exec_in_service() {
    local service="$1"
    shift
    local command="$*"
    
    log "üñ•Ô∏è Ex√©cution de commande dans $service: $command"
    
    local mapped_service=$(map_service_name "$service")
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env exec -T $mapped_service $command"
}

# Inspect service
inspect_service() {
    local service="$1"
    
    log "üîç Inspection du service $service..."
    
    local mapped_service=$(map_service_name "$service")
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        echo '=== Container Info ==='
        docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env ps $mapped_service
        echo ''
        echo '=== Container Details ==='
        docker inspect \$(docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env ps -q $mapped_service) 2>/dev/null || echo 'Container not running'
        echo ''
        echo '=== Recent Logs (last 50 lines) ==='
        docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env logs --tail=50 $mapped_service
    }"
}

# Setup databases
setup_databases() {
    log "üóÑÔ∏è Configuration des bases de donn√©es..."
    
    log "  Attente de PostgreSQL (${DB_READY_TIMEOUT}s)..."
    sleep "$DB_READY_TIMEOUT"
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        # Le conteneur PostgreSQL s'appelle 'dealtobook-postgres' d'apr√®s le docker-compose
        # Utiliser l'utilisateur 'dealtobook' (celui d√©fini dans POSTGRES_USER)
        # Attendre que PostgreSQL soit pr√™t
        for i in {1..30}; do
            docker exec dealtobook-postgres pg_isready -U dealtobook >/dev/null 2>&1 && break
            sleep 2
        done
        
        # V√©rifier et corriger les fichiers scripts (certains peuvent √™tre des r√©pertoires)
        echo 'üîç V√©rification des fichiers scripts...'
        
        # Si pg_hba.conf est un r√©pertoire, le supprimer et le recr√©er comme fichier
        if [ -d scripts/pg_hba.conf ]; then
            echo '   ‚ö†Ô∏è  scripts/pg_hba.conf est un R√âPERTOIRE (bug pr√©c√©dent), correction...'
            rm -rf scripts/pg_hba.conf
            # Le transfert pr√©c√©dent devrait l'avoir recr√©√© comme fichier
        fi
        
        if [ -f scripts/pg_hba.conf ]; then
            echo '   ‚úì scripts/pg_hba.conf trouv√© (fichier)'
        elif [ -d scripts/pg_hba.conf ]; then
            echo '   ‚ùå scripts/pg_hba.conf est toujours un r√©pertoire !'
            ls -ld scripts/pg_hba.conf
        else
            echo '   ‚ùå scripts/pg_hba.conf NON TROUV√â !'
            echo '   üìÇ Contenu de scripts/:'
            ls -la scripts/ 2>/dev/null | head -15
        fi
        
        # APPLIQUER pg_hba.conf personnalis√© depuis le serveur distant (double v√©rification)
        echo 'üîß Application de pg_hba.conf personnalis√© (apr√®s d√©marrage)...'
        # Si le fichier n'est pas mont√©, le copier directement depuis le serveur
        if ! docker exec dealtobook-postgres test -f /tmp/pg_hba_custom.conf 2>/dev/null; then
            echo '   ‚ö†Ô∏è  /tmp/pg_hba_custom.conf non mont√©, copie depuis le serveur...'
            if [ -f scripts/pg_hba.conf ]; then
                docker cp scripts/pg_hba.conf dealtobook-postgres:/tmp/pg_hba_custom.conf 2>/dev/null && \
                    echo '   ‚úÖ Fichier copi√© dans le conteneur' || \
                    echo '   ‚ùå √âchec de la copie manuelle'
            else
                echo '   ‚ùå scripts/pg_hba.conf non trouv√© sur le serveur'
            fi
        fi
        
        if docker exec dealtobook-postgres test -f /tmp/pg_hba_custom.conf 2>/dev/null; then
            echo '   üìã Copie de pg_hba.conf personnalis√©...'
            # Supprimer le fichier existant et recr√©er avec les bonnes permissions
            docker exec dealtobook-postgres sh -c 'rm -f /var/lib/postgresql/data/pg_hba.conf && cp /tmp/pg_hba_custom.conf /var/lib/postgresql/data/pg_hba.conf && chmod 600 /var/lib/postgresql/data/pg_hba.conf && chown postgres:postgres /var/lib/postgresql/data/pg_hba.conf' 2>/dev/null || true
            
            # V√©rifier les permissions
            if docker exec dealtobook-postgres ls -l /var/lib/postgresql/data/pg_hba.conf 2>/dev/null | grep -q "postgres postgres"; then
                echo '   ‚úÖ Permissions correctes v√©rifi√©es'
            else
                echo '   ‚ö†Ô∏è  V√©rification des permissions du r√©pertoire data...'
                docker exec dealtobook-postgres sh -c 'chmod 700 /var/lib/postgresql/data && chown -R postgres:postgres /var/lib/postgresql/data/pg_hba.conf' 2>/dev/null || true
            fi
            
            echo '   üîÑ Rechargement de la configuration PostgreSQL...'
            # Attendre un peu avant le reload pour que PostgreSQL soit pr√™t
            sleep 2
            docker exec dealtobook-postgres psql -U dealtobook -d postgres -c 'SELECT pg_reload_conf();' 2>&1 | grep -v "could not open\|was not reloaded" || \
                docker exec dealtobook-postgres psql -U postgres -d postgres -c 'SELECT pg_reload_conf();' 2>&1 | grep -v "could not open\|was not reloaded" || true
            echo '   ‚úÖ pg_hba.conf appliqu√©'
        fi
        
        # Cr√©er les bases de donn√©es si elles n'existent pas (idempotent - safe √† lancer plusieurs fois)
        echo 'üì¶ V√©rification des bases de donn√©es existantes...'
        
        # Cr√©er les bases de donn√©es une par une avec une approche simple et directe
        for db in dealtobook_db deal_setting deal_generator keycloak; do
            echo \"  üîç V√©rification de la base \$db...\"
            # V√©rifier si la base existe
            check_result=\$(docker exec dealtobook-postgres psql -U dealtobook -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='\''\$db'\''\" 2>/dev/null || echo '')
            
            if [ \"\$check_result\" = \"1\" ]; then
                echo \"  ‚úì Base \$db existe d√©j√†\"
            else
                echo \"  + Cr√©ation de la base \$db...\"
                # Cr√©er la base avec une commande SQL simple
                docker exec dealtobook-postgres psql -U dealtobook -d postgres -c \"CREATE DATABASE \\\"\$db\\\" OWNER dealtobook;\" 2>/dev/null && \
                    docker exec dealtobook-postgres psql -U dealtobook -d postgres -c \"GRANT ALL PRIVILEGES ON DATABASE \\\"\$db\\\" TO dealtobook;\" 2>/dev/null && \
                    echo \"  ‚úÖ Base \$db cr√©√©e\" || \
                    echo \"  ‚ö†Ô∏è  Erreur lors de la cr√©ation de \$db\"
            fi
        done
        
        echo '‚úÖ Toutes les bases de donn√©es sont pr√™tes (idempotent)'
    }" || warning "Erreur lors de la configuration des bases de donn√©es"
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        docker-compose -f docker-compose.ssl-complete.yml --env-file .env restart deal-generator deal-security deal-setting
        echo 'Services backend red√©marr√©s'
    }" || warning "Erreur lors du red√©marrage des services backend"
    
    success "Bases de donn√©es configur√©es"
}

# Setup Keycloak realm
setup_keycloak_realm() {
    log "üîê Configuration du realm Keycloak..."
    
    log "  Attente de Keycloak (${KEYCLOAK_READY_TIMEOUT}s)..."
    sleep "$KEYCLOAK_READY_TIMEOUT"
    
    local keycloak_url="https://keycloak-dev.dealtobook.com"
    if [[ "$DEPLOY_ENV" == "production" ]]; then
        keycloak_url="https://keycloak.dealtobook.com"
    fi
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        ADMIN_TOKEN=\$(curl -s -X POST '$keycloak_url/realms/master/protocol/openid-connect/token' \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d 'username=admin' \
            -d 'password=\${KEYCLOAK_ADMIN_PASSWORD:-admin123}' \
            -d 'grant_type=password' \
            -d 'client_id=admin-cli' \
            --insecure | jq -r '.access_token' 2>/dev/null || echo 'null')
        
        if [ \"\$ADMIN_TOKEN\" != 'null' ] && [ -n \"\$ADMIN_TOKEN\" ]; then
            echo 'Token admin obtenu'
            
            curl -s -X POST '$keycloak_url/admin/realms' \
                -H \"Authorization: Bearer \$ADMIN_TOKEN\" \
                -H 'Content-Type: application/json' \
                --insecure \
                -d '{
                    \"realm\": \"dealtobook\",
                    \"displayName\": \"DealToBook Realm\",
                    \"enabled\": true,
                    \"sslRequired\": \"external\",
                    \"registrationAllowed\": true,
                    \"loginWithEmailAllowed\": true,
                    \"duplicateEmailsAllowed\": false,
                    \"resetPasswordAllowed\": true,
                    \"editUsernameAllowed\": false,
                    \"bruteForceProtected\": true
                }' 2>/dev/null || true
            
            curl -s -X POST '$keycloak_url/admin/realms/dealtobook/clients' \
                -H \"Authorization: Bearer \$ADMIN_TOKEN\" \
                -H 'Content-Type: application/json' \
                --insecure \
                -d '{
                    \"clientId\": \"dealtobook-app\",
                    \"name\": \"DealToBook Application\",
                    \"enabled\": true,
                    \"clientAuthenticatorType\": \"client-secret\",
                    \"secret\": \"dealtobook-secret\",
                    \"standardFlowEnabled\": true,
                    \"implicitFlowEnabled\": false,
                    \"directAccessGrantsEnabled\": true,
                    \"serviceAccountsEnabled\": true,
                    \"publicClient\": false,
                    \"protocol\": \"openid-connect\",
                    \"redirectUris\": [
                        \"'$keycloak_url'/*\"
                    ],
                    \"webOrigins\": [
                        \"*\"
                    ]
                }' 2>/dev/null || true
            
            echo 'Realm et client Keycloak configur√©s'
        else
            echo 'Impossible d obtenir le token admin Keycloak'
        fi
    }" || warning "Erreur lors de la configuration Keycloak"
    
    success "Keycloak configur√©"
}

# Health check
health_check() {
    log "üîç V√©rification de la sant√© des services..."
    
    log "  Attente de la stabilisation (${SERVICE_STABILIZATION_TIMEOUT}s)..."
    sleep "$SERVICE_STABILIZATION_TIMEOUT"
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        echo 'üìä Status des conteneurs :'
        docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env ps
        
        echo -e '\nüß™ Health checks :'
        
        # Test des endpoints backend
        for port in 8081 8082 8083; do
            service_name=\$(case \$port in 8081) echo 'generator';; 8082) echo 'security';; 8083) echo 'setting';; esac)
            echo -n \"  ‚Ä¢ deal_\$service_name (\$port): \"
            if curl -s -f http://localhost:\$port/management/health > /dev/null 2>&1; then
                echo '‚úÖ Healthy'
            else
                echo '‚ùå Unhealthy'
            fi
        done
        
        # Test des endpoints HTTPS
        echo -n '  ‚Ä¢ WebUI (HTTPS): '
        if curl -s -I https://administration${DEPLOY_ENV:+-dev}.dealtobook.com 2>/dev/null | head -1 | grep -q '200\|301\|302'; then
            echo '‚úÖ Accessible'
        else
            echo '‚ùå Not accessible'
        fi
        
        echo -n '  ‚Ä¢ Website (HTTPS): '
        if curl -s -I https://website${DEPLOY_ENV:+-dev}.dealtobook.com 2>/dev/null | head -1 | grep -q '200\|301\|302'; then
            echo '‚úÖ Accessible'
        else
            echo '‚ùå Not accessible'
        fi
        
        echo -n '  ‚Ä¢ Keycloak (HTTPS): '
        if curl -s -I https://keycloak${DEPLOY_ENV:+-dev}.dealtobook.com 2>/dev/null | head -1 | grep -q '200\|301\|302'; then
            echo '‚úÖ Accessible'
        else
            echo '‚ùå Not accessible'
        fi
    }" || warning "Erreur lors de la v√©rification de sant√©"
    
    success "V√©rification de sant√© termin√©e"
}

# Test SSL endpoints
test_ssl_endpoints() {
    log "üåê Test des endpoints HTTPS..."
    
    for domain in "${DOMAINS[@]}"; do
        log "  Test de https://${domain}..."
        if run_remote_cmd "curl -s -I https://${domain} | head -1"; then
            success "  ‚úÖ ${domain} r√©pond"
        else
            warning "  ‚ö†Ô∏è  ${domain} ne r√©pond pas"
        fi
    done
}

# Show deployment summary
show_deployment_summary() {
    log "‚úÖ D√âPLOIEMENT TERMIN√â !"
    echo ""
    echo -e "${GREEN}üéâ DEALTOBOOK D√âPLOY√â AVEC SUCC√àS !${NC}"
    echo "=================================================="
    echo ""
    echo -e "${BLUE}üåê Applications HTTPS :${NC}"
    
    if [[ "$DEPLOY_ENV" == "development" ]]; then
        echo "  ‚Ä¢ Administration: https://administration-dev.dealtobook.com"
        echo "  ‚Ä¢ Website: https://website-dev.dealtobook.com"
        echo "  ‚Ä¢ Keycloak: https://keycloak-dev.dealtobook.com"
    else
        echo "  ‚Ä¢ Administration: https://administration.dealtobook.com"
        echo "  ‚Ä¢ Website: https://website.dealtobook.com"
        echo "  ‚Ä¢ Keycloak: https://keycloak.dealtobook.com"
    fi
    
    echo ""
    echo -e "${BLUE}üìä Monitoring :${NC}"
    echo "  ‚Ä¢ Prometheus: http://$HOSTINGER_IP:9090"
    echo "  ‚Ä¢ Grafana: http://$HOSTINGER_IP:3000 (admin/admin)"
    echo "  ‚Ä¢ Zipkin: http://$HOSTINGER_IP:9411"
    echo ""
    echo -e "${BLUE}üîß APIs Backend :${NC}"
    echo "  ‚Ä¢ Generator: http://$HOSTINGER_IP:8081/management/health"
    echo "  ‚Ä¢ Security: http://$HOSTINGER_IP:8082/management/health"
    echo "  ‚Ä¢ Setting: http://$HOSTINGER_IP:8083/management/health"
    echo ""
    echo -e "${PURPLE}üöÄ Commandes utiles :${NC}"
    echo "  ‚Ä¢ Status: $0 status"
    echo "  ‚Ä¢ Logs: $0 logs [service]"
    echo "  ‚Ä¢ Restart: $0 restart [service]"
    echo "  ‚Ä¢ Health: $0 health"
    echo "  ‚Ä¢ Inspect: $0 inspect <service>"
}

# Show usage
show_usage() {
    cat << EOF
Usage: $0 {COMMAND} [services] [options]

üì¶ BUILD & DEPLOY:
  build              : Construire et pousser les images vers GHCR
  build-only         : Build uniquement (sans d√©ploiement)
  deploy             : D√©ploiement complet (build + deploy + config + SSL)
  deploy-only        : D√©ployer sans rebuild
  update             : Mise √† jour s√©lective (build + red√©marrage cibl√©)
  redeploy           : Red√©ploiement rapide (sans rebuild)

üîß GESTION DES SERVICES:
  start              : D√©marrer les services
  stop               : Arr√™ter les services
  restart            : Red√©marrer les services
  down               : Arr√™ter et supprimer tous les conteneurs
  pull               : T√©l√©charger les images sans red√©marrer
  ps|list            : Liste des conteneurs
  scale <service> <n>: Scaler un service √† n replicas

üõ†Ô∏è OP√âRATIONS AVANC√âES:
  exec <service> <cmd>: Ex√©cuter une commande dans un conteneur
  inspect <service>  : Inspecter un service (logs, config, etc.)
  
üìä MONITORING & DEBUG:
  status             : V√©rifier le status du d√©ploiement
  health             : Health check d√©taill√©
  logs [service]     : Afficher les logs en temps r√©el
  test-ssl           : Tester les endpoints HTTPS

‚öôÔ∏è CONFIGURATION:
  ssl-setup          : Configurer les certificats SSL Let's Encrypt
  config             : D√©ployer uniquement la configuration
  restore-backup <local_backup_dir> [--reset] : Restaurer une sauvegarde PostgreSQL Azure (option --reset pour drop/recreate)

üéØ Services disponibles (optionnel) :
  Backend : deal_generator (generator), deal_security (security), deal_setting (setting)
  Frontend: deal_webui (webui/admin), deal_website (website)
  Infra   : keycloak, postgres (db), redis, nginx, zipkin, prometheus, grafana

üìù Exemples d'utilisation :

  üü° DEVELOPMENT:
    export DEPLOY_ENV=development
    export CR_PAT="your_token"
    $0 deploy

  üü¢ PRODUCTION:
    export DEPLOY_ENV=production
    export CR_PAT="your_token"
    $0 deploy

  Build d'un service sp√©cifique:
    $0 build deal_security

  Restart plusieurs services:
    $0 restart deal_generator,deal_security

  Voir les logs d'un service:
    $0 logs webui

  Scaler un service:
    $0 scale deal-generator 3

  Ex√©cuter une commande:
    $0 exec postgres psql -U dealtobook

  Inspecter un service:
    $0 inspect deal-security

  Utiliser un tag personnalis√©:
    export CUSTOM_TAG="v1.2.3"
    $0 deploy

üîë Variables d'environnement :
  OBLIGATOIRE:
    export CR_PAT="votre_github_token"               # Token GitHub pour GHCR

  ENVIRONNEMENT:
    export DEPLOY_ENV="development|production"       # Environnement cible

  SERVEURS:
    export HOSTINGER_DEV_HOST="148.230.114.13"       # IP serveur dev
    export HOSTINGER_DEV_USER="root"                 # User SSH dev
    export HOSTINGER_PROD_HOST="148.230.114.13"      # IP serveur prod
    export HOSTINGER_PROD_USER="root"                # User SSH prod

  TIMEOUTS (optionnel):
    export DB_READY_TIMEOUT="60"                     # Timeout PostgreSQL
    export KEYCLOAK_READY_TIMEOUT="90"               # Timeout Keycloak
    export SERVICE_STABILIZATION_TIMEOUT="30"        # Timeout stabilisation

  AUTRES:
    export GITHUB_USERNAME="skaouech"                # Utilisateur GitHub
    export CUSTOM_TAG="v1.2.3"                       # Tag personnalis√©

‚ö†Ô∏è  S√âCURIT√â: Ne JAMAIS hardcoder les tokens dans le code !
EOF
}

# Main function
main() {
    echo -e "${PURPLE}"
    echo "üöÄ ===== D√âPLOIEMENT DEALTOBOOK AVEC SSL v2.0 ====="
    echo "==================================================="
    echo -e "${NC}"
    
    # Afficher l'environnement actif
    if [[ "$DEPLOY_ENV" == "development" ]]; then
        echo -e "${YELLOW}üìç Environnement: DEVELOPMENT${NC}"
    else
        echo -e "${GREEN}üìç Environnement: PRODUCTION${NC}"
    fi
    echo -e "   üñ•Ô∏è  Serveur: $HOSTINGER_IP"
    echo -e "   üìÅ Dossier: /opt/$PROJECT_NAME"
    echo -e "   üè∑Ô∏è  Tag images: $IMAGE_TAG"
    echo ""
    
    # Parse command
    local command="${1:-}"
    shift || true
    
    # Parse services if provided (skip for commands that do not accept services like restore-backup)
    if [[ "$command" != "restore-backup" ]]; then
        if [[ -n "${1:-}" ]] && [[ ! "$1" =~ ^- ]]; then
            parse_services "$1"
            shift || true
        fi
    fi
    
    case "$command" in
        ssl-setup)
            check_prerequisites
            setup_ssl_certificates
            ;;
        build)
            check_prerequisites true
            login_to_ghcr
            build_backend_services
            build_frontend_services
            ;;
        build-only)
            log "üèóÔ∏è Build uniquement (sans d√©ploiement)..."
            check_prerequisites true
            login_to_ghcr
            build_backend_services
            build_frontend_services
            success "‚úÖ Build termin√©"
            ;;
        deploy)
            check_prerequisites
            login_to_ghcr
            
            if ! check_ssl_certificates; then
                warning "Certificats SSL manquants. Ex√©cutez d'abord: $0 ssl-setup"
                exit 1
            fi
            
            build_backend_services
            build_frontend_services
            deploy_to_hostinger
            start_services_on_hostinger
            setup_databases
            setup_keycloak_realm
            health_check
            show_deployment_summary
            ;;
        deploy-only)
            log "üöÄ D√©ploiement uniquement (sans rebuild)..."
            check_prerequisites
            deploy_to_hostinger
            start_services_on_hostinger
            health_check
            success "‚úÖ D√©ploiement termin√©"
            ;;
        update)
            log "üîÑ Mise √† jour s√©lective des services..."
            check_prerequisites
            login_to_ghcr
            build_backend_services
            build_frontend_services
            deploy_to_hostinger
            start_services_on_hostinger
            health_check
            ;;
        restore-backup)
            # Usage: restore-backup /path/to/local/backup-dir
            check_prerequisites
            local local_backup_dir="${1:-}"
            local reset_opt="${2:-}"
            if [ -z "$local_backup_dir" ] || [ ! -d "$local_backup_dir" ]; then
                error "Usage: $0 restore-backup /chemin/vers/backup"
            fi
            log "üóÇÔ∏è  Pr√©paration de la restauration depuis: $local_backup_dir"
            # Cr√©er r√©pertoire sur le serveur
            run_remote_cmd "mkdir -p /opt/${PROJECT_NAME}/backups && chmod 755 /opt/${PROJECT_NAME}/backups" || true
            # Destination distante horodat√©e
            local ts
            ts=$(date +%Y%m%d-%H%M%S)
            local remote_dir="/opt/${PROJECT_NAME}/backups/restore-${ts}"
            run_remote_cmd "mkdir -p '$remote_dir'" || true
            # Transf√©rer les fichiers
            log "üì§ Transfert du backup vers le serveur..."
            scp -r -o StrictHostKeyChecking=no "$local_backup_dir/" "${HOSTINGER_USER}@${HOSTINGER_IP}:$remote_dir/" || error "Transfert du backup √©chou√©"
            # Transf√©rer le script de restauration
            if [ -f "$CONFIG_DIR/scripts/restore-from-backup.sh" ]; then
                scp -o StrictHostKeyChecking=no "$CONFIG_DIR/scripts/restore-from-backup.sh" "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/scripts/restore-from-backup.sh" || error "Transfert du script restore √©chou√©"
                run_remote_cmd "chmod +x /opt/${PROJECT_NAME}/scripts/restore-from-backup.sh" || true
            else
                error "Script restore-from-backup.sh introuvable dans $CONFIG_DIR/scripts"
            fi
            # Ex√©cuter la restauration
            log "üîÅ Ex√©cution de la restauration sur le serveur..."
            run_remote_cmd "cd /opt/${PROJECT_NAME} && ./scripts/restore-from-backup.sh '$remote_dir' dealtobook-postgres dealtobook '${reset_opt}'" || error "Restauration √©chou√©e"
            success "Restauration termin√©e"
            ;;
        redeploy)
            log "üîÑ Red√©ploiement rapide..."
            check_prerequisites
            deploy_to_hostinger
            restart_services_on_hostinger
            health_check
            ;;
        config)
            check_prerequisites
            deploy_to_hostinger
            ;;
        start)
            check_prerequisites
            start_services_on_hostinger
            setup_databases
            health_check
            ;;
        stop)
            check_prerequisites
            stop_services_on_hostinger
            ;;
        restart)
            check_prerequisites
            restart_services_on_hostinger
            success "‚úÖ Services red√©marr√©s"
            ;;
        down)
            log "‚¨áÔ∏è Arr√™t et suppression des conteneurs..."
            check_prerequisites
            run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env down --remove-orphans"
            success "‚úÖ Services arr√™t√©s et supprim√©s"
            ;;
        pull)
            check_prerequisites
            pull_images_on_hostinger
            ;;
        scale)
            if [[ -z "${1:-}" ]] || [[ -z "${2:-}" ]]; then
                error "Usage: $0 scale <service> <replicas>"
            fi
            check_prerequisites
            scale_services "$1" "$2"
            ;;
        exec)
            if [[ -z "${1:-}" ]]; then
                error "Usage: $0 exec <service> <command>"
            fi
            check_prerequisites
            exec_in_service "$@"
            ;;
        inspect)
            if [[ -z "${1:-}" ]]; then
                error "Usage: $0 inspect <service>"
            fi
            check_prerequisites
            inspect_service "$1"
            ;;
        logs)
            log "üìã Affichage des logs..."
            check_prerequisites
            
            local services_list=$(get_mapped_services_list)
            if [[ "$BUILD_SPECIFIC_SERVICES" == "true" ]]; then
                run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env logs -f$services_list"
            else
                run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env logs -f"
            fi
            ;;
        ps|list)
            log "üìã Liste des conteneurs..."
            check_prerequisites
            run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_REMOTE} --env-file .env ps"
            ;;
        status)
            health_check
            ;;
        health)
            log "üè• V√©rification sant√© d√©taill√©e..."
            health_check
            ;;
        test-ssl)
            test_ssl_endpoints
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            show_usage
            exit 1
            ;;
    esac
}

# Execute main with all arguments
main "$@"

