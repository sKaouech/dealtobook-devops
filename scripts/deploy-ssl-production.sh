#!/bin/bash
set -e

# üéØ Script de d√©ploiement avec SSL/HTTPS pour Hostinger
# G√®re DNS, certificats SSL, et d√©ploiement complet

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration - UTILISEZ DES VARIABLES D'ENVIRONNEMENT POUR LES SECRETS !
GITHUB_USERNAME="${GITHUB_USERNAME:-skaouech}"
REGISTRY="${REGISTRY:-ghcr.io}"
CR_PAT="${CR_PAT:-}"  # ‚ö†Ô∏è D√âFINIR COMME VARIABLE D'ENVIRONNEMENT: export CR_PAT="votre_token"

# Environnement (development ou production)
DEPLOY_ENV="${DEPLOY_ENV:-production}"  # Par d√©faut: production

# Configuration bas√©e sur l'environnement
if [[ "$DEPLOY_ENV" == "development" ]]; then
    HOSTINGER_IP="${HOSTINGER_DEV_HOST:-148.230.114.13}"
    HOSTINGER_USER="${HOSTINGER_DEV_USER:-root}"
    PROJECT_NAME="dealtobook-dev"
    DOCKER_COMPOSE_FILE="docker-compose.ssl-complete.yml"
    ENV_FILE="dealtobook-ssl-dev.env"
    IMAGE_TAG="develop"
    DOMAINS=("administration-dev.dealtobook.com" "website-dev.dealtobook.com" "keycloak-dev.dealtobook.com")
else
    HOSTINGER_IP="${HOSTINGER_PROD_HOST:-148.230.114.13}"
    HOSTINGER_USER="${HOSTINGER_PROD_USER:-root}"
    PROJECT_NAME="dealtobook"
    DOCKER_COMPOSE_FILE="docker-compose.ssl-complete.yml"
    ENV_FILE="dealtobook-ssl.env"
    IMAGE_TAG="latest"
    DOMAINS=("administration.dealtobook.com" "website.dealtobook.com" "keycloak.dealtobook.com")
fi

# Microservices configuration (using simple arrays for bash compatibility)
BACKEND_SERVICES_DIRS=("deal_generator" "deal_security" "deal_setting")
BACKEND_SERVICES_IMAGES=("dealdealgenerator" "dealsecurity" "dealsetting")

FRONTEND_SERVICES_DIRS=("deal_webui" "deal_website")
FRONTEND_SERVICES_IMAGES=("dealtobook-deal-webui" "dealtobook-deal-website")

# Services sp√©cifiques (peut √™tre modifi√© par les arguments)
SPECIFIC_SERVICES=()
BUILD_SPECIFIC_SERVICES=false

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# Parse specific services from arguments
parse_services() {
    local services_arg="$1"
    if [[ -n "$services_arg" ]]; then
        BUILD_SPECIFIC_SERVICES=true
        IFS=',' read -ra SPECIFIC_SERVICES <<< "$services_arg"
        log "üéØ Services sp√©cifiques s√©lectionn√©s: ${SPECIFIC_SERVICES[*]}"
    fi
}

# Check if a service should be processed
should_process_service() {
    local service="$1"
    if [[ "$BUILD_SPECIFIC_SERVICES" == "false" ]]; then
        return 0  # Process all services
    fi
    
    for specific_service in "${SPECIFIC_SERVICES[@]}"; do
        if [[ "$service" == "$specific_service" ]]; then
            return 0  # Process this service
        fi
    done
    return 1  # Skip this service
}

# Configure Java 17 for JHipster compatibility
setup_java17() {
    log "üîß Configuration de Java 17..."
    
    # Check if Java 17 is available
    if /usr/libexec/java_home -v 17 >/dev/null 2>&1; then
        export JAVA_HOME=$(/usr/libexec/java_home -v 17)
        export PATH="$JAVA_HOME/bin:$PATH"
        success "Java 17 configur√©: $JAVA_HOME"
        java -version
    else
        error "Java 17 non trouv√©. Veuillez installer Java 17 (JDK 11-18 requis pour JHipster)"
    fi
}

run_remote_cmd() {
    ssh -o StrictHostKeyChecking=no "${HOSTINGER_USER}@${HOSTINGER_IP}" "$1"
}

check_prerequisites() {
    local skip_ssh=${1:-false}
    log "üîç V√©rification des pr√©requis..."
    
    # Setup Java 17 first
    setup_java17
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©"
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n'est pas install√©"
    fi
    
    # V√©rifier les variables d'environnement pour GHCR (optionnel pour SSL)
    if [ -n "$CR_PAT" ]; then
        info "Token GHCR d√©tect√© - build et push vers GHCR activ√©s"
    else
        warning "Variable CR_PAT non d√©finie - utilisation des images locales uniquement"
    fi
    
    # V√©rifier SSH vers Hostinger (sauf pour build local)
    if [ "$skip_ssh" != "true" ]; then
        if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 "${HOSTINGER_USER}@${HOSTINGER_IP}" "echo 'SSH OK'" &> /dev/null; then
            error "Impossible de se connecter √† Hostinger via SSH"
        fi
    fi
    
    success "Pr√©requis valid√©s"
}

login_to_ghcr() {
    if [ -n "$CR_PAT" ]; then
        log "üîë Connexion √† GitHub Container Registry..."
        echo "$CR_PAT" | docker login ghcr.io -u "$GITHUB_USERNAME" --password-stdin || error "√âchec de la connexion √† GHCR"
        success "Connect√© √† GHCR"
    else
        warning "CR_PAT non d√©fini - pas de connexion GHCR"
    fi
}

check_ssl_certificates() {
    log "üîí V√©rification des certificats SSL..."
    
    for domain in "${DOMAINS[@]}"; do
        log "  V√©rification du certificat pour ${domain}..."
        if run_remote_cmd "test -f /etc/letsencrypt/live/${domain}/fullchain.pem"; then
            success "  ‚úÖ Certificat SSL trouv√© pour ${domain}"
        else
            warning "  ‚ö†Ô∏è  Certificat SSL manquant pour ${domain}"
            return 1
        fi
    done
    
    success "üîí Tous les certificats SSL sont pr√©sents"
}

setup_ssl_certificates() {
    log "üîí Configuration des certificats SSL avec Let's Encrypt..."
    
    # Arr√™ter les services qui utilisent les ports 80/443
    run_remote_cmd "docker stop dealtobook-nginx || true"
    run_remote_cmd "systemctl stop nginx || true"
    
    # Installer Certbot si n√©cessaire
    run_remote_cmd "apt update && apt install -y certbot python3-certbot-nginx"
    
    # Configuration Nginx temporaire pour Certbot
    run_remote_cmd 'cat > /tmp/nginx-temp.conf << "EOF"
events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        server_name administration-dev.dealtobook.com website-dev.dealtobook.com keycloak-dev.dealtobook.com;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$host$request_uri;
        }
    }
}
EOF'
    
    # D√©marrer Nginx temporaire
    run_remote_cmd "mkdir -p /var/www/certbot"
    run_remote_cmd "cp /tmp/nginx-temp.conf /etc/nginx/nginx.conf"
    run_remote_cmd "systemctl start nginx"
    
    # Obtenir les certificats
    DOMAIN_LIST=$(IFS=' -d '; echo "${DOMAINS[*]}")
    run_remote_cmd "certbot --nginx -d ${DOMAIN_LIST// -d / -d } --non-interactive --agree-tos --email admin@dealtobook.com --expand"
    
    # Arr√™ter Nginx syst√®me
    run_remote_cmd "systemctl stop nginx && systemctl disable nginx"
    
    success "üîí Certificats SSL configur√©s avec succ√®s"
}

build_backend_services() {
    log "üèóÔ∏è Construction des services backend avec JIB..."
    
    for i in "${!BACKEND_SERVICES_DIRS[@]}"; do
        local service_key="${BACKEND_SERVICES_DIRS[$i]}"
        local image_name="${BACKEND_SERVICES_IMAGES[$i]}"
        local service_dir="../dealtobook-${service_key}"
        
        # V√©rifier si ce service doit √™tre trait√©
        if ! should_process_service "$service_key" && ! should_process_service "$image_name"; then
            info "‚è≠Ô∏è Service $service_key ignor√© (non sp√©cifi√©)"
            continue
        fi
        
        if [ -d "$service_dir" ]; then
            log "  Building $service_key ‚Üí $image_name..."
            
            (cd "$service_dir" && {
                if [ -n "$CR_PAT" ]; then
                    # Convertir en minuscules pour Docker
                    local image_name_lower=$(echo "$GITHUB_USERNAME/$image_name" | tr '[:upper:]' '[:lower:]')
                    
                    # Build avec JIB et push vers GHCR (compile + build en une √©tape)
                    ./mvnw compile jib:build -Pprod -DskipTests \
                        -Djib.to.image="$REGISTRY/$image_name_lower:$IMAGE_TAG" \
                        -Djib.to.auth.username="$GITHUB_USERNAME" \
                        -Djib.to.auth.password="$CR_PAT" || error "JIB build failed for $service_key"
                    
                    # Tag avec SHA pour tra√ßabilit√©
                    local commit_sha=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
                    docker tag "$REGISTRY/$image_name_lower:$IMAGE_TAG" \
                              "$REGISTRY/$image_name_lower:$IMAGE_TAG-$commit_sha" 2>/dev/null || true
                    docker push "$REGISTRY/$image_name_lower:$IMAGE_TAG-$commit_sha" 2>/dev/null || true
                else
                    # Build local uniquement (compile + build en une √©tape)
                    ./mvnw compile jib:dockerBuild -Pprod -DskipTests || error "JIB build failed for $service_key"
                fi
            }) || error "Build failed for $service_key"
            
            success "  Service $service_key construit et pouss√©"
        else
            warning "  R√©pertoire $service_dir non trouv√©"
        fi
    done
}

build_frontend_services() {
    log "üåê Construction des services frontend..."
    
    for i in "${!FRONTEND_SERVICES_DIRS[@]}"; do
        local service_key="${FRONTEND_SERVICES_DIRS[$i]}"
        local image_name="${FRONTEND_SERVICES_IMAGES[$i]}"
        local service_dir="../dealtobook-${service_key}"
        
        # V√©rifier si ce service doit √™tre trait√©
        if ! should_process_service "$service_key" && ! should_process_service "$image_name"; then
            info "‚è≠Ô∏è Service $service_key ignor√© (non sp√©cifi√©)"
            continue
        fi
        
        if [ -d "$service_dir" ]; then
            log "  Building $service_key ‚Üí $image_name..."
            
            local dockerfile="Dockerfile.simple"
            if [ "$service_key" = "deal_website" ]; then
                dockerfile="Dockerfile.frontend"
            fi
            
            if [ -n "$CR_PAT" ]; then
                # Convertir en minuscules pour Docker
                local image_name_lower=$(echo "$GITHUB_USERNAME/$image_name" | tr '[:upper:]' '[:lower:]')
                
                # Build et push vers GHCR avec architecture linux/amd64
                docker build --platform linux/amd64 -t "$REGISTRY/$image_name_lower:$IMAGE_TAG" \
                            -f "$service_dir/$dockerfile" "$service_dir/" || error "Docker build failed for $service_key"
                
                docker push "$REGISTRY/$image_name_lower:$IMAGE_TAG" || error "Docker push failed for $service_key"
                
                # Tag avec SHA pour tra√ßabilit√©
                local commit_sha=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
                docker tag "$REGISTRY/$image_name_lower:$IMAGE_TAG" \
                          "$REGISTRY/$image_name_lower:$IMAGE_TAG-$commit_sha" 2>/dev/null || true
                docker push "$REGISTRY/$image_name_lower:$IMAGE_TAG-$commit_sha" 2>/dev/null || true
            else
                # Build local uniquement avec architecture linux/amd64
                docker build --platform linux/amd64 -t "$image_name:latest" \
                            -f "$service_dir/$dockerfile" "$service_dir/" || error "Docker build failed for $service_key"
            fi
            
            success "  Service $service_key construit"
        else
            warning "  R√©pertoire $service_dir non trouv√©"
        fi
    done
}

deploy_to_hostinger() {
    log "üöÄ D√©ploiement sur Hostinger..."
    
    # Cr√©er le r√©pertoire de projet sur Hostinger
    run_remote_cmd "mkdir -p /opt/${PROJECT_NAME}/{nginx,monitoring/grafana/provisioning/{datasources,dashboards},scripts}"
    
    # Transf√©rer les fichiers de configuration
    log "  Transfert des fichiers de configuration..."
    scp -o StrictHostKeyChecking=no "$DOCKER_COMPOSE_FILE" "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/" || error "Failed to transfer docker-compose"
    scp -o StrictHostKeyChecking=no "$ENV_FILE" "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/.env" || error "Failed to transfer .env file"
    
    # Transf√©rer la configuration Nginx
    if [ -d "nginx" ]; then
        scp -r -o StrictHostKeyChecking=no nginx/ "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/" || warning "Failed to transfer nginx config"
    fi
    
    # Transf√©rer la configuration de monitoring
    if [ -d "monitoring" ]; then
        scp -r -o StrictHostKeyChecking=no monitoring/ "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/" || warning "Failed to transfer monitoring config"
    fi
    
    # Transf√©rer les scripts
    if [ -d "scripts" ]; then
        scp -r -o StrictHostKeyChecking=no scripts/ "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/" || warning "Failed to transfer scripts"
    fi
    
    # Transf√©rer keycloak them
    if [ -d "keycloak-themes" ]; then
        scp -r -o StrictHostKeyChecking=no keycloak-themes/ "${HOSTINGER_USER}@${HOSTINGER_IP}:/opt/${PROJECT_NAME}/" || warning "Failed to transfer keycloak-themes"
    fi

    success "Configuration transf√©r√©e"
}

start_services_on_hostinger() {
    log "üîÑ D√©marrage des services sur Hostinger..."
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        # Login to GHCR if available
        if [ -n '$CR_PAT' ]; then
            echo '$CR_PAT' | docker login ghcr.io -u '$GITHUB_USERNAME' --password-stdin
            # Pull des nouvelles images
            if [ '$BUILD_SPECIFIC_SERVICES' = 'true' ]; then
                # Pull seulement les services sp√©cifi√©s
                services_to_pull=''
                for service in ${SPECIFIC_SERVICES[@]}; do
                    case \$service in
                        'deal_generator'|'dealdealgenerator')
                            services_to_pull+=\" deal-generator\"
                            ;;
                        'deal_security'|'dealsecurity')
                            services_to_pull+=\" deal-security\"
                            ;;
                        'deal_setting'|'dealsetting')
                            services_to_pull+=\" deal-setting\"
                            ;;
                        'deal_webui'|'dealtobook-deal-webui')
                            services_to_pull+=\" deal-webui\"
                            ;;
                        'deal_website'|'dealtobook-deal-website')
                            services_to_pull+=\" deal-website\"
                            ;;
                        'keycloak')
                            services_to_pull+=\" keycloak\"
                            ;;
                        'postgres'|'postgresql')
                            services_to_pull+=\" postgres\"
                            ;;
                        *)
                            services_to_pull+=\" \$service\"
                            ;;
                    esac
                done
                if [ -n '$CR_PAT' ]; then
                    echo \"üéØ Pull des images sp√©cifiques:\$services_to_pull\"
                    docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env pull\$services_to_pull
                else
                    echo \"üéØ Utilisation des images locales (pas de pull)\"
                fi
            else
                if [ -n '$CR_PAT' ]; then
                    docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env pull
                else
                    echo \"üéØ Utilisation des images locales (pas de pull)\"
                fi
            fi
        fi
    
    # Arr√™ter les anciens services
        if [ '$BUILD_SPECIFIC_SERVICES' = 'true' ]; then
            # Arr√™ter seulement les services sp√©cifi√©s
            services_to_stop=''
            for service in ${SPECIFIC_SERVICES[@]}; do
                case \$service in
                    'deal_generator'|'dealdealgenerator')
                        services_to_stop+=\" deal-generator\"
                        ;;
                    'deal_security'|'dealsecurity')
                        services_to_stop+=\" deal-security\"
                        ;;
                    'deal_setting'|'dealsetting')
                        services_to_stop+=\" deal-setting\"
                        ;;
                    'deal_webui'|'dealtobook-deal-webui')
                        services_to_stop+=\" deal-webui\"
                        ;;
                    'deal_website'|'dealtobook-deal-website')
                        services_to_stop+=\" deal-website\"
                        ;;
                    'keycloak')
                        services_to_stop+=\" keycloak\"
                        ;;
                    'postgres'|'postgresql')
                        services_to_stop+=\" postgres\"
                        ;;
                    *)
                        services_to_stop+=\" \$service\"
                        ;;
                esac
            done
            echo \"üéØ Arr√™t des services sp√©cifiques:\$services_to_stop\"
            docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env stop\$services_to_stop || true
        else
            # Arr√™ter tous les services
            docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env down --remove-orphans || true
        fi
    
    # Cr√©er le r√©seau Docker
        docker network create dealtobook-network || true
    
    # D√©marrer les services
        if [ '$BUILD_SPECIFIC_SERVICES' = 'true' ]; then
            # Construire la liste des services √† d√©marrer
            services_to_start=''
            for service in ${SPECIFIC_SERVICES[@]}; do
                case \$service in
                    'deal_generator'|'dealdealgenerator')
                        services_to_start+=\" deal-generator\"
                        ;;
                    'deal_security'|'dealsecurity')
                        services_to_start+=\" deal-security\"
                        ;;
                    'deal_setting'|'dealsetting')
                        services_to_start+=\" deal-setting\"
                        ;;
                    'deal_webui'|'dealtobook-deal-webui')
                        services_to_start+=\" deal-webui\"
                        ;;
                    'deal_website'|'dealtobook-deal-website')
                        services_to_start+=\" deal-website\"
                        ;;
                    'keycloak')
                        services_to_start+=\" keycloak\"
                        ;;
                    'postgres'|'postgresql')
                        services_to_start+=\" postgres\"
                        ;;
                    *)
                        services_to_start+=\" \$service\"
                        ;;
                esac
            done
            echo \"üéØ D√©marrage des services sp√©cifiques:\$services_to_start\"
            if [ -n '$CR_PAT' ]; then
                docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env up -d --pull always\$services_to_start
            else
                docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env up -d\$services_to_start
            fi
        else
            # D√©marrage s√©quentiel des services pour √©viter les conflits de d√©pendances
            echo \"üöÄ D√©marrage s√©quentiel des services avec force-recreate...\"
            
            # Arr√™ter tous les services d'abord pour forcer la r√©cup√©ration des nouvelles images
            echo \"üõë Arr√™t des services existants...\"
            docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env down --remove-orphans
            
            # 1. Infrastructure de base
            echo \"üìä D√©marrage de l'infrastructure...\"
            docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env up -d --force-recreate postgres redis zipkin prometheus grafana
            sleep 10
            
            # 2. Keycloak (d√©pend de PostgreSQL)
            echo \"üîê D√©marrage de Keycloak...\"
            docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env up -d --force-recreate keycloak
            sleep 15
            
            # 3. Services backend (d√©pendent de Keycloak et PostgreSQL)
            echo \"‚öôÔ∏è D√©marrage des services backend...\"
            docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env up -d --force-recreate deal-generator deal-security deal-setting
            sleep 20
            
            # 4. Services frontend (d√©pendent des services backend) - FORCE RECREATE pour nouvelles images
            echo \"üåê D√©marrage des services frontend avec nouvelles images...\"
            docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env up -d --force-recreate deal-webui deal-website
            sleep 10
            
            # 5. Nginx (d√©pend de tous les autres services)
            echo \"üîÑ D√©marrage de Nginx...\"
            docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env up -d --force-recreate nginx
            
            echo \"‚úÖ Tous les services d√©marr√©s s√©quentiellement avec force-recreate\"
        fi
        
        echo 'Services d√©marr√©s'
    }" || error "√âchec du d√©marrage des services"
    
    success "Services d√©marr√©s sur Hostinger"
}

setup_databases() {
    log "üóÑÔ∏è Configuration des bases de donn√©es..."
    
    # Attendre que PostgreSQL soit pr√™t
    log "  Attente de PostgreSQL (60s)..."
    sleep 60
    
    # Cr√©er les bases de donn√©es
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        # Cr√©er les bases de donn√©es si elles n'existent pas
        docker exec dealtobook-postgres psql -U dealtobook -d dealtobook_db -c 'CREATE DATABASE IF NOT EXISTS deal_setting;' 2>/dev/null || true
        docker exec dealtobook-postgres psql -U dealtobook -d dealtobook_db -c 'CREATE DATABASE IF NOT EXISTS keycloak;' 2>/dev/null || true
        docker exec dealtobook-postgres psql -U dealtobook -d dealtobook_db -c 'CREATE DATABASE IF NOT EXISTS deal_generator;' 2>/dev/null || true
        
        echo 'Bases de donn√©es configur√©es'
    }" || warning "Erreur lors de la configuration des bases de donn√©es"
    
    # Red√©marrer les services backend
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        docker-compose -f $DOCKER_COMPOSE_FILE --env-file .env restart deal-generator deal-security deal-setting
        echo 'Services backend red√©marr√©s'
    }" || warning "Erreur lors du red√©marrage des services backend"
    
    success "Bases de donn√©es configur√©es"
}

setup_keycloak_realm() {
    log "üîê Configuration du realm Keycloak..."
    
    # Attendre que Keycloak soit pr√™t
    log "  Attente de Keycloak (90s)..."
    sleep 90
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        # Obtenir le token d'admin
        ADMIN_TOKEN=\$(curl -s -X POST 'https://keycloak-dev.dealtobook.com/realms/master/protocol/openid-connect/token' \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d 'username=admin' \
            -d 'password=${KEYCLOAK_ADMIN_PASSWORD:-admin123}' \
            -d 'grant_type=password' \
            -d 'client_id=admin-cli' \
            --insecure | jq -r '.access_token' 2>/dev/null || echo 'null')
        
        if [ \"\$ADMIN_TOKEN\" != 'null' ] && [ -n \"\$ADMIN_TOKEN\" ]; then
            echo 'Token admin obtenu'
            
            # Cr√©er le realm dealtobook
            curl -s -X POST 'https://keycloak-dev.dealtobook.com/admin/realms' \
                -H \"Authorization: Bearer \$ADMIN_TOKEN\" \
                -H 'Content-Type: application/json' \
                --insecure \
                -d '{
                    \"realm\": \"dealtobook\",
                    \"displayName\": \"DealToBook Realm\",
                    \"enabled\": true,
                    \"sslRequired\": \"external\",
                    \"registrationAllowed\": true,
                    \"loginWithEmailAllowed\": true,
                    \"duplicateEmailsAllowed\": false,
                    \"resetPasswordAllowed\": true,
                    \"editUsernameAllowed\": false,
                    \"bruteForceProtected\": true
                }' 2>/dev/null || true
            
            # Cr√©er le client
            curl -s -X POST 'https://keycloak-dev.dealtobook.com/admin/realms/dealtobook/clients' \
                -H \"Authorization: Bearer \$ADMIN_TOKEN\" \
                -H 'Content-Type: application/json' \
                --insecure \
                -d '{
                    \"clientId\": \"dealtobook-app\",
                    \"name\": \"DealToBook Application\",
                    \"enabled\": true,
                    \"clientAuthenticatorType\": \"client-secret\",
                    \"secret\": \"dealtobook-secret\",
                    \"standardFlowEnabled\": true,
                    \"implicitFlowEnabled\": false,
                    \"directAccessGrantsEnabled\": true,
                    \"serviceAccountsEnabled\": true,
                    \"publicClient\": false,
                    \"protocol\": \"openid-connect\",
                    \"redirectUris\": [
                        \"https://administration-dev.dealtobook.com/*\",
                        \"https://website-dev.dealtobook.com/*\"
                    ],
                    \"webOrigins\": [
                        \"https://administration-dev.dealtobook.com\",
                        \"https://website-dev.dealtobook.com\"
                    ]
                }' 2>/dev/null || true
            
            echo 'Realm et client Keycloak configur√©s'
        else
            echo 'Impossible d obtenir le token admin Keycloak'
        fi
    }" || warning "Erreur lors de la configuration Keycloak"
    
    success "Keycloak configur√©"
}

redeploy_services_only() {
    log "üîÑ Red√©ploiement rapide des services (sans rebuild)..."
    
    # Transf√©rer les fichiers de configuration mis √† jour
    deploy_to_hostinger
    
    # Arr√™ter et red√©marrer les services avec force-recreate
    run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env down --remove-orphans"
    run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env up -d --force-recreate" || error "Docker Compose redeploy failed"
    
    log "‚è≥ Attente de 30 secondes pour le red√©marrage des services..."
    sleep 30
    
    success "üîÑ Services red√©ploy√©s avec succ√®s"
}

test_ssl_endpoints() {
    log "üåê Test des endpoints HTTPS..."
    
    for domain in "${DOMAINS[@]}"; do
        log "  Test de https://${domain}..."
        if run_remote_cmd "curl -s -I https://${domain} | head -1"; then
            success "  ‚úÖ ${domain} r√©pond"
        else
            warning "  ‚ö†Ô∏è  ${domain} ne r√©pond pas"
        fi
    done
}

health_check() {
    log "üîç V√©rification de la sant√© des services..."
    
    # Attendre la stabilisation
    log "  Attente de la stabilisation (60s)..."
    sleep 60
    
    run_remote_cmd "cd /opt/${PROJECT_NAME} && {
        echo 'üìä Status des conteneurs :'
        docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
        
        echo -e '\nüß™ Health checks :'
        
        # Test des endpoints backend
        for port in 8081 8082 8083; do
            service_name=\$(case \$port in 8081) echo 'generator';; 8082) echo 'security';; 8083) echo 'setting';; esac)
            echo -n \"  ‚Ä¢ deal_\$service_name (\$port): \"
            if curl -s -f http://localhost:\$port/management/health > /dev/null 2>&1; then
                echo '‚úÖ Healthy'
            else
                echo '‚ùå Unhealthy'
            fi
        done
        
        # Test des endpoints HTTPS
        echo -n '  ‚Ä¢ WebUI (HTTPS): '
        if curl -s -I https://administration-dev.dealtobook.com 2>/dev/null | head -1 | grep -q '200\|301\|302'; then
            echo '‚úÖ Accessible'
        else
            echo '‚ùå Not accessible'
        fi
        
        echo -n '  ‚Ä¢ Website (HTTPS): '
        if curl -s -I https://website-dev.dealtobook.com 2>/dev/null | head -1 | grep -q '200\|301\|302'; then
            echo '‚úÖ Accessible'
        else
            echo '‚ùå Not accessible'
        fi
        
        echo -n '  ‚Ä¢ Keycloak (HTTPS): '
        if curl -s -I https://keycloak-dev.dealtobook.com 2>/dev/null | head -1 | grep -q '200\|301\|302'; then
            echo '‚úÖ Accessible'
        else
            echo '‚ùå Not accessible'
        fi
    }" || warning "Erreur lors de la v√©rification de sant√©"
    
    success "V√©rification de sant√© termin√©e"
}

show_deployment_summary() {
    log "‚úÖ D√âPLOIEMENT TERMIN√â !"
    echo ""
    echo -e "${GREEN}üéâ DEALTOBOOK D√âPLOY√â AVEC SUCC√àS !${NC}"
    echo "=================================================="
    echo ""
    echo -e "${BLUE}üåê Applications HTTPS :${NC}"
    echo "  ‚Ä¢ Administration: https://administration-dev.dealtobook.com"
    echo "  ‚Ä¢ Website: https://website-dev.dealtobook.com"
    echo "  ‚Ä¢ Keycloak: https://keycloak-dev.dealtobook.com"
    echo ""
    echo -e "${BLUE}üìä Monitoring :${NC}"
    echo "  ‚Ä¢ Prometheus: http://$HOSTINGER_IP:9090"
    echo "  ‚Ä¢ Grafana: http://$HOSTINGER_IP:3000 (admin/admin)"
    echo "  ‚Ä¢ Zipkin: http://$HOSTINGER_IP:9411"
    echo ""
    echo -e "${BLUE}üîß APIs Backend :${NC}"
    echo "  ‚Ä¢ Generator: http://$HOSTINGER_IP:8081/management/health"
    echo "  ‚Ä¢ Security: http://$HOSTINGER_IP:8082/management/health"
    echo "  ‚Ä¢ Setting: http://$HOSTINGER_IP:8083/management/health"
    echo ""
    echo -e "${PURPLE}üöÄ Commandes utiles :${NC}"
    echo "  ‚Ä¢ Status: ssh $HOSTINGER_USER@$HOSTINGER_IP 'cd /opt/$PROJECT_NAME && docker-compose ps'"
    echo "  ‚Ä¢ Logs: ssh $HOSTINGER_USER@$HOSTINGER_IP 'cd /opt/$PROJECT_NAME && docker-compose logs -f'"
    echo "  ‚Ä¢ Restart: ssh $HOSTINGER_USER@$HOSTINGER_IP 'cd /opt/$PROJECT_NAME && docker-compose restart'"
}

main() {
    echo -e "${PURPLE}"
    echo "üöÄ ===== D√âPLOIEMENT DEALTOBOOK AVEC SSL ====="
    echo "=============================================="
    echo -e "${NC}"
    
    # Afficher l'environnement actif
    if [[ "$DEPLOY_ENV" == "development" ]]; then
        echo -e "${YELLOW}üìç Environnement: DEVELOPMENT${NC}"
        echo -e "   üñ•Ô∏è  Serveur: $HOSTINGER_IP"
        echo -e "   üìÅ Dossier: /opt/$PROJECT_NAME"
        echo -e "   üè∑Ô∏è  Tag images: $IMAGE_TAG"
    else
        echo -e "${GREEN}üìç Environnement: PRODUCTION${NC}"
        echo -e "   üñ•Ô∏è  Serveur: $HOSTINGER_IP"
        echo -e "   üìÅ Dossier: /opt/$PROJECT_NAME"
        echo -e "   üè∑Ô∏è  Tag images: $IMAGE_TAG"
    fi
    echo ""                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
    
    # Parse services sp√©cifiques si fournis
    if [[ "$2" =~ ^[a-zA-Z_,]+$ ]]; then
        parse_services "$2"
    fi
    
    case "$1" in
        ssl-setup)
            check_prerequisites
            setup_ssl_certificates
            ;;
        build)
            check_prerequisites true  # Skip SSH check for build-only
            login_to_ghcr
            build_backend_services
            build_frontend_services
            ;;
        deploy)
            check_prerequisites
            login_to_ghcr
            
            # V√©rifier les certificats SSL
            if ! check_ssl_certificates; then
                warning "Certificats SSL manquants. Ex√©cutez d'abord: $0 ssl-setup"
                exit 1
            fi
            
            build_backend_services
            build_frontend_services
            deploy_to_hostinger
            start_services_on_hostinger
            setup_databases
            setup_keycloak_realm
            health_check
            show_deployment_summary
            ;;
        config)
            check_prerequisites
            deploy_to_hostinger
            ;;
        start)
            check_prerequisites
            start_services_on_hostinger
            setup_databases
            health_check
            ;;
        redeploy)
            log "üîÑ Red√©ploiement rapide avec vos changements..."
            check_prerequisites
            redeploy_services_only
            health_check
            ;;
        update)
            log "üîÑ Mise √† jour s√©lective des services..."
            check_prerequisites
            login_to_ghcr
            build_backend_services
            build_frontend_services
            deploy_to_hostinger
            start_services_on_hostinger
            health_check
            ;;
        status)
            health_check
            ;;
        test-ssl)
            test_ssl_endpoints
            ;;
        down)
            log "Arr√™t des services..."
            run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env down --remove-orphans"
            ;;
        logs)
            log "Affichage des logs..."
            if [[ "$BUILD_SPECIFIC_SERVICES" == "true" ]]; then
                # Construire la liste des services pour les logs
                services_list=""
                for service in "${SPECIFIC_SERVICES[@]}"; do
                    services_list+=" $service"
                done
                run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env logs -f${services_list}"
            else
                run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env logs -f"
            fi
            ;;
        restart)
            log "üîÑ Red√©marrage des services..."
            if [[ "$BUILD_SPECIFIC_SERVICES" == "true" ]]; then
                # Red√©marrer seulement les services sp√©cifi√©s
                services_to_restart=""
                for service in "${SPECIFIC_SERVICES[@]}"; do
                    case "$service" in
                        'deal_generator'|'dealdealgenerator')
                            services_to_restart+=" deal-generator"
                            ;;
                        'deal_security'|'dealsecurity')
                            services_to_restart+=" deal-security"
                            ;;
                        'deal_setting'|'dealsetting')
                            services_to_restart+=" deal-setting"
                            ;;
                        'deal_webui'|'dealtobook-deal-webui')
                            services_to_restart+=" deal-webui"
                            ;;
                        'deal_website'|'dealtobook-deal-website')
                            services_to_restart+=" deal-website"
                            ;;
                        'keycloak')
                            services_to_restart+=" keycloak"
                            ;;
                        'postgres'|'postgresql')
                            services_to_restart+=" postgres"
                            ;;
                        'nginx')
                            services_to_restart+=" nginx"
                            ;;
                        'redis')
                            services_to_restart+=" redis"
                            ;;
                        *)
                            services_to_restart+=" $service"
                            ;;
                    esac
                done
                log "üéØ Red√©marrage des services:$services_to_restart"
                run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env restart$services_to_restart"
            else
                run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env restart"
            fi
            success "‚úÖ Services red√©marr√©s"
            ;;
        stop)
            log "üõë Arr√™t des services..."
            if [[ "$BUILD_SPECIFIC_SERVICES" == "true" ]]; then
                # Arr√™ter seulement les services sp√©cifi√©s
                services_to_stop=""
                for service in "${SPECIFIC_SERVICES[@]}"; do
                    case "$service" in
                        'deal_generator'|'dealdealgenerator')
                            services_to_stop+=" deal-generator"
                            ;;
                        'deal_security'|'dealsecurity')
                            services_to_stop+=" deal-security"
                            ;;
                        'deal_setting'|'dealsetting')
                            services_to_stop+=" deal-setting"
                            ;;
                        'deal_webui'|'dealtobook-deal-webui')
                            services_to_stop+=" deal-webui"
                            ;;
                        'deal_website'|'dealtobook-deal-website')
                            services_to_stop+=" deal-website"
                            ;;
                        'keycloak')
                            services_to_stop+=" keycloak"
                            ;;
                        'postgres'|'postgresql')
                            services_to_stop+=" postgres"
                            ;;
                        'nginx')
                            services_to_stop+=" nginx"
                            ;;
                        *)
                            services_to_stop+=" $service"
                            ;;
                    esac
                done
                log "üéØ Arr√™t des services:$services_to_stop"
                run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env stop$services_to_stop"
            else
                run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env stop"
            fi
            success "‚úÖ Services arr√™t√©s"
            ;;
        ps|list)
            log "üìã Liste des conteneurs..."
            run_remote_cmd "cd /opt/${PROJECT_NAME} && docker-compose -f ${DOCKER_COMPOSE_FILE} --env-file .env ps"
            ;;
        health)
            log "üè• V√©rification sant√© d√©taill√©e..."
            health_check
            ;;
        build-only)
            log "üèóÔ∏è Build uniquement (sans d√©ploiement)..."
            check_prerequisites true
            login_to_ghcr
            build_backend_services
            build_frontend_services
            success "‚úÖ Build termin√©"
            ;;
        deploy-only)
            log "üöÄ D√©ploiement uniquement (sans rebuild)..."
            check_prerequisites
            deploy_to_hostinger
            start_services_on_hostinger
            health_check
            success "‚úÖ D√©ploiement termin√©"
            ;;
        *)
            echo "Usage: $0 {COMMAND} [services]"
            echo ""
            echo "üì¶ BUILD & DEPLOY:"
            echo "  build         : Construire et pousser les images vers GHCR"
            echo "  build-only    : Build uniquement (sans d√©ploiement)"
            echo "  deploy        : D√©ploiement complet (build + deploy + config + SSL)"
            echo "  deploy-only   : D√©ployer sans rebuild"
            echo "  update        : Mise √† jour s√©lective (build + red√©marrage cibl√©)"
            echo "  redeploy      : Red√©ploiement rapide (sans rebuild)"
            echo ""
            echo "üîß GESTION DES SERVICES:"
            echo "  start         : D√©marrer les services"
            echo "  stop          : Arr√™ter les services"
            echo "  restart       : Red√©marrer les services"
            echo "  down          : Arr√™ter et supprimer tous les conteneurs"
            echo "  ps|list       : Liste des conteneurs"
            echo ""
            echo "üìä MONITORING & DEBUG:"
            echo "  status        : V√©rifier le status du d√©ploiement"
            echo "  health        : Health check d√©taill√©"
            echo "  logs          : Afficher les logs en temps r√©el"
            echo "  test-ssl      : Tester les endpoints HTTPS"
            echo ""
            echo "‚öôÔ∏è CONFIGURATION:"
            echo "  ssl-setup     : Configurer les certificats SSL Let's Encrypt"
            echo "  config        : D√©ployer uniquement la configuration"
            echo ""
            echo "üéØ Services disponibles (optionnel) :"
            echo "  Backend : deal_generator, deal_security, deal_setting"
            echo "  Frontend: deal_webui, deal_website"
            echo "  Infra   : keycloak, postgres, redis, nginx, zipkin, prometheus, grafana"
            echo ""
            echo "üìù Exemples d'utilisation :"
            echo ""
            echo "  üü° DEVELOPMENT:"
            echo "    export DEPLOY_ENV=development"
            echo "    export CR_PAT=\"your_token\""
            echo "    ./deploy-ssl-production.sh deploy"
            echo ""
            echo "  üü¢ PRODUCTION:"
            echo "    export DEPLOY_ENV=production"
            echo "    export CR_PAT=\"your_token\""
            echo "    ./deploy-ssl-production.sh deploy"
            echo ""
            echo "  Build d'un service sp√©cifique:"
            echo "    ./deploy-ssl-production.sh build deal_security"
            echo ""
            echo "  Red√©marrer des services:"
            echo "    ./deploy-ssl-production.sh restart deal_generator,deal_security"
            echo ""
            echo "  Voir les logs d'un service:"
            echo "    ./deploy-ssl-production.sh logs deal_webui"
            echo ""
            echo "  Health check:"
            echo "    ./deploy-ssl-production.sh health"
            echo ""
            echo "üîë Variables d'environnement :"
            echo "  OBLIGATOIRE:"
            echo "    export CR_PAT=\"votre_github_token\"         # Token GitHub pour GHCR"
            echo ""
            echo "  ENVIRONNEMENT (Development ou Production):"
            echo "    export DEPLOY_ENV=\"development\"            # Deploy vers DEV (tag: develop, /opt/dealtobook-dev)"
            echo "    export DEPLOY_ENV=\"production\"             # Deploy vers PROD (tag: latest, /opt/dealtobook)"
            echo ""
            echo "  DEVELOPMENT:"
            echo "    export HOSTINGER_DEV_HOST=\"148.230.114.13\" # IP serveur dev"
            echo "    export HOSTINGER_DEV_USER=\"root\"           # User SSH dev"
            echo ""
            echo "  PRODUCTION:"
            echo "    export HOSTINGER_PROD_HOST=\"148.230.114.13\"# IP serveur prod"
            echo "    export HOSTINGER_PROD_USER=\"root\"          # User SSH prod"
            echo ""
            echo "  AUTRES:"
            echo "    export GITHUB_USERNAME=\"skaouech\"          # Utilisateur GitHub (en minuscules)"
            echo ""
            echo "‚ö†Ô∏è  S√âCURIT√â: Ne JAMAIS hardcoder les tokens dans le code !"
            exit 1
            ;;
    esac
}

main "$@"
