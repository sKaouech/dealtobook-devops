version: '3.8'

services:
  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: dealtobook-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: dealtobook_db
      POSTGRES_USER: dealtobook
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devpassword123}
      # Allow external connections
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
      - ./scripts/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    ports:
      - "5432:5432"
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dealtobook -d dealtobook_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== AUTHENTICATION =====
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: dealtobook-keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: dealtobook
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-devpassword123}
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_PROXY: edge
      KC_PROXY_ADDRESS_FORWARDING: true
      KC_HOSTNAME: keycloak-dev.dealtobook.com
      KC_PROXY_HEADERS: xforwarded
    command: start-dev
    ports:
      - "9080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/realms/master || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===== BACKEND MICROSERVICES (GHCR Images) =====
  deal-generator:
    image: ghcr.io/skaouech/dealdealgenerator:latest
    container_name: dealtobook-generator-backend
    restart: unless-stopped
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: prod
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/deal_generator
      SPRING_DATASOURCE_USERNAME: dealtobook
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-devpassword123}
      SPRING_LIQUIBASE_URL: jdbc:postgresql://postgres:5432/deal_generator
      
      # OAuth2/OIDC Configuration
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI: http://keycloak-dev.dealtobook.com/realms/dealtobook
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID: dealtobook-app
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-dealtobook-secret}
      LOGGIN_DEALTOBOOK_SETTING: INFO
      LOGGIN_DEALTOBOOK_GENERATOR: INFO
      LOGGIN_DEALTOBOOK_SECURITY: INFO
      
      # Monitoring Configuration
      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: true
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      
      # JVM Configuration
      _JAVA_OPTIONS: -Xmx1536m -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication
      JAVA_OPTS: -Dspring.profiles.active=prod -Dmanagement.prometheus.metrics.export.enabled=true
      
      # Application Specific
      JHIPSTER_SLEEP: 10
      
      # Logging Configuration
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_DEALTOBOOK_DEAL: INFO
      LOGGING_LEVEL_TECH_JHIPSTER: INFO
      
      # Mail Configuration
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST:-localhost}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME:-}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD:-}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:-false}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:-false}
      
      # Microservices URLs
      SERVER.URL.DEALSECURITY: http://deal-security:8082
      SERVER.URL.DEALSETTING: http://deal-setting:8083
      
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/management/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5

  deal-security:
    image: ghcr.io/skaouech/dealsecurity:latest
    container_name: dealtobook-security-backend
    restart: unless-stopped
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: prod
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/keycloak
      SPRING_DATASOURCE_USERNAME: dealtobook
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-devpassword123}
      SPRING_LIQUIBASE_URL: jdbc:postgresql://postgres:5432/keycloak
      
      # OAuth2/OIDC Configuration
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI: http://keycloak-dev.dealtobook.com/realms/dealtobook
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID: dealtobook-app
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-dealtobook-secret}
      LOGGIN_DEALTOBOOK_SETTING: INFO
      LOGGIN_DEALTOBOOK_GENERATOR: INFO
      LOGGIN_DEALTOBOOK_SECURITY: INFO
      
      # Monitoring Configuration
      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: true
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      
      # JVM Configuration
      _JAVA_OPTIONS: -Xmx1536m -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication
      JAVA_OPTS: -Dspring.profiles.active=prod -Dmanagement.prometheus.metrics.export.enabled=true
      
      # Application Specific
      JHIPSTER_SLEEP: 10
      
      # Logging Configuration
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_DEALTOBOOK_SECURITY: INFO
      LOGGING_LEVEL_TECH_JHIPSTER: INFO
      
      # Mail Configuration
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST:-localhost}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME:-}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD:-}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:-false}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:-false}
      
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/management/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5

  deal-setting:
    image: ghcr.io/skaouech/dealsetting:latest
    container_name: dealtobook-setting-backend
    restart: unless-stopped
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: prod
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/deal_setting
      SPRING_DATASOURCE_USERNAME: dealtobook
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-devpassword123}
      SPRING_LIQUIBASE_URL: jdbc:postgresql://postgres:5432/deal_setting
      
      # OAuth2/OIDC Configuration
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI: http://keycloak-dev.dealtobook.com/realms/dealtobook
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID: dealtobook-app
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-dealtobook-secret}
      LOGGIN_DEALTOBOOK_SETTING: INFO
      LOGGIN_DEALTOBOOK_GENERATOR: INFO
      LOGGIN_DEALTOBOOK_SECURITY: INFO
      
      # Monitoring Configuration
      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: true
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      
      # JVM Configuration
      _JAVA_OPTIONS: -Xmx1536m -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication
      JAVA_OPTS: -Dspring.profiles.active=prod -Dmanagement.prometheus.metrics.export.enabled=true
      
      # Application Specific
      JHIPSTER_SLEEP: 10
      
      # Logging Configuration
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_DEALTOBOOK_SETTING: INFO
      LOGGING_LEVEL_TECH_JHIPSTER: INFO
      
      # Mail Configuration
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST:-localhost}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME:-}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD:-}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:-false}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:-false}
      
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/management/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5

  # ===== FRONTEND APPLICATIONS (GHCR Images) =====
  deal-webui:
    image: ghcr.io/skaouech/dealtobook-deal-webui:latest
    container_name: dealtobook-webui-frontend
    restart: unless-stopped
    environment:
      # Angular Environment
      NODE_ENV: production
      
      # API Endpoints
      API_BASE_URL: https://administration-dev.dealtobook.com/api
      API_GENERATOR_URL: https://administration-dev.dealtobook.com/api/generator
      API_SECURITY_URL: https://administration-dev.dealtobook.com/api/security
      API_SETTING_URL: https://administration-dev.dealtobook.com/api/setting
      
      # Keycloak Configuration
      KEYCLOAK_URL: http://keycloak-dev.dealtobook.com
      KEYCLOAK_REALM: dealtobook
      KEYCLOAK_CLIENT_ID: dealtobook-app
      
      # Application Configuration
      APP_NAME: DealToBook Administration
      APP_VERSION: ${APP_VERSION:-1.0.0}
      
    ports:
      - "4200:4200"
    depends_on:
      - keycloak
      - deal-generator
      - deal-security
      - deal-setting
    networks:
      - dealtobook-network

  deal-website:
    image: ghcr.io/skaouech/dealtobook-deal-website:latest
    container_name: dealtobook-website-frontend
    restart: unless-stopped
    environment:
      # Angular Environment
      NODE_ENV: production
      
      # API Endpoints
      API_BASE_URL: https://website-dev.dealtobook.com/api
      API_GENERATOR_URL: https://website-dev.dealtobook.com/api/generator
      API_SECURITY_URL: https://website-dev.dealtobook.com/api/security
      API_SETTING_URL: https://website-dev.dealtobook.com/api/setting
      
      # Keycloak Configuration
      KEYCLOAK_URL: http://keycloak-dev.dealtobook.com
      KEYCLOAK_REALM: dealtobook
      KEYCLOAK_CLIENT_ID: dealtobook-app
      
      # Application Configuration
      APP_NAME: DealToBook Website
      APP_VERSION: ${APP_VERSION:-1.0.0}
      
    ports:
      - "4201:4201"
    depends_on:
      - keycloak
      - deal-generator
      - deal-security
      - deal-setting
    networks:
      - dealtobook-network

  # ===== REVERSE PROXY =====
  nginx:
    image: nginx:alpine
    container_name: dealtobook-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.http.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - deal-webui
      - deal-website
      - deal-generator
      - deal-security
      - deal-setting
      - keycloak
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== MONITORING =====
  prometheus:
    image: prom/prometheus:latest
    container_name: dealtobook-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - dealtobook-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://148.230.114.13:9090'

  grafana:
    image: grafana/grafana:latest
    container_name: dealtobook-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_SERVER_ROOT_URL: http://148.230.114.13:3000
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    networks:
      - dealtobook-network

  # ===== DISTRIBUTED TRACING =====
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: dealtobook-zipkin
    restart: unless-stopped
    ports:
      - "9411:9411"
    environment:
      STORAGE_TYPE: mem
    networks:
      - dealtobook-network

  # ===== REDIS CACHE =====
  redis:
    image: redis:7-alpine
    container_name: dealtobook-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  dealtobook-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
