version: '3.8'

services:
  # üåê Nginx Reverse Proxy avec SSL
  nginx:
    image: nginx:1.24-alpine
    container_name: dealtobook-nginx-ssl
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-dev-passthrough.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - deal-webui
      - deal-website
      - keycloak
      - deal-generator
      - deal-security
      - deal-setting
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîê Certbot pour Let's Encrypt
  certbot:
    image: certbot/certbot:latest
    container_name: dealtobook-certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email skaouech@dealtobook.com --agree-tos --no-eff-email -d administration-dev.dealtobook.com -d website-dev.dealtobook.com -d keycloak-dev.dealtobook.com
    depends_on:
      - nginx

  # üîÑ Renouvellement automatique des certificats
  certbot-renew:
    image: certbot/certbot:latest
    container_name: dealtobook-certbot-renew
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: renew --webroot --webroot-path=/var/www/certbot
    profiles:
      - cron

  # üêò PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dealtobook-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: dealtobook_db
      POSTGRES_USER: dealtobook
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-DealToBook2024SecurePassword!}
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
      - ./scripts/pg_hba.conf:/tmp/pg_hba_custom.conf:ro
      - ./scripts/99-copy-pg-hba.sh:/docker-entrypoint-initdb.d/99-copy-pg-hba.sh:ro
      - ./scripts/postgres-entrypoint.sh:/usr/local/bin/postgres-entrypoint.sh:ro
    # Utiliser l'entrypoint personnalis√© qui copie pg_hba.conf √† chaque d√©marrage
    entrypoint: ["/usr/local/bin/postgres-entrypoint.sh"]
    # Param√®tres de configuration PostgreSQL
    command: >
      postgres
      -c listen_addresses='*'
    ports:
      - "5432:5432"
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dealtobook -d dealtobook_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üî¥ Redis Cache
#  redis:
#    image: redis:7-alpine
#    container_name: dealtobook-redis
#    restart: unless-stopped
#    command: redis-server --requirepass ${REDIS_PASSWORD:-devpassword123}
#    ports:
#      - "6379:6379"
#    networks:
#      - dealtobook-network
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 3

  # üîê Keycloak OAuth2 Server
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: dealtobook-keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: dealtobook
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-DealToBook2024SecurePassword!}
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_PROXY: edge
      KC_PROXY_ADDRESS_FORWARDING: true
      KC_HOSTNAME: keycloak-dev.dealtobook.com
      KC_PROXY_HEADERS: xforwarded
    command: start-dev
    ports:
      - "9080:8080"
      - "9443:8443"
    volumes:
      - ./keycloak-themes:/opt/keycloak/themes:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo -e 'GET /realms/master HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n' >&3 && grep -q 'HTTP/1.1 200' <&3"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 90s

  # üèóÔ∏è Deal Generator Backend
  deal-generator:
    image: ghcr.io/skaouech/dealdealgenerator:latest
    container_name: dealtobook-generator-backend
    restart: unless-stopped
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: prod,no-liquibase,no-cache
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/deal_generator
      SPRING_DATASOURCE_USERNAME: dealtobook
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-DealToBook2024SecurePassword!}
      SPRING_LIQUIBASE_URL: jdbc:postgresql://postgres:5432/deal_generator
      
      # OAuth2/OIDC Configuration
#      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook
#      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID: dealtobook-app
#      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-dealtobook-secret}
      LOGGIN_DEALTOBOOK_SETTING: INFO
      LOGGIN_DEALTOBOOK_GENERATOR: INFO
      LOGGIN_DEALTOBOOK_SECURITY: INFO
      
      # Monitoring Configuration
#      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: true
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      
      # JVM Configuration
      _JAVA_OPTIONS: -Xmx1536m -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication -Dspring.profiles.active=prod,no-liquibase,no-cache
      JAVA_OPTS: -Dspring.profiles.active=prod,no-liquibase,no-cache -Dmanagement.prometheus.metrics.export.enabled=true -Dliquibase.enabled=false -Dspring.jpa.properties.hibernate.cache.use_second_level_cache=false -Dspring.cache.type=none
      
      # Application Specific
      JHIPSTER_SLEEP: 10
      HAZELCAST_INSTANCE_NAME: hazelcast-deal
      
      # Disable Hibernate Cache (temporary fix)
      SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE: false
      SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_QUERY_CACHE: false
      
      # Keycloak Configuration (Legacy format from application-prod.yml)
      KEYCLOAK_REALM: dealtobook
      KEYCLOAK_REALM_PUBLIC_ID: 4c1fa747-87ac-48d4-a4bb-8a5d30651206
      KEYCLOAK_AUTH_SERVER_URL: https://keycloak-dev.dealtobook.com
      KEYCLOAK_CLIENT_ID: dealdealgen
#      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-JXZoDWixhuFmA06CsFMyTSGjIq0RH2EV}
      KEYCLOAK_CLIENT_SECRET: JXZoDWixhuFmA06CsFMyTSGjIq0RH2EV

      # Additional Variables from application-prod.yml
      GOOGLE_RECAPTCHA_SECRET_KEY: 6Ldh7awjAAAAAGnY0joDMaLXv2MEPtCsMb2dNZs2
      EXPIRATION_PROVIDER_NOT-ACTIVE: "0 */2 * ? * *"
      EXPIRATION_PROVIDER_VERIFY-EMAIL: "2"
      EXPIRATION_PROVIDER_VERIFY-EMAIL_UNITY: m
      EXPIRATION_CLIENT_VERIFY-EMAIL: "1"
      EXPIRATION_CLIENT_VERIFY-EMAIL_UNITY: m
      EXPIRATION_PROVIDER_VERIFY-EMAIL_ATTEMPT-NBR: "3"
      EXPIRATION_CLIENT_VERIFY-EMAIL_ATTEMPT-NBR: "3"
      EXPIRATION_CLIENT_NOT-ACTIVE: "0 */2 * ? * *"
      MAIL_BASE_URL: https://administration-dev.dealtobook.com
      
      # AWS Configuration (for deal-setting)
      AWS_BUCKET_NAME: dealtobooktier-dev
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY:-dummy}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY:-dummy}
      
      # Logging Configuration
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_DEALTOBOOK_DEAL: INFO
      LOGGING_LEVEL_TECH_JHIPSTER: INFO
      
      # Mail Configuration
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST:-localhost}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME:-}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD:-}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:-false}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:-false}
      
      # Microservices URLs (from application-prod.yml)
      SERVER_URL_DEALSETTING: http://deal-setting:8083
      SERVER_URL_DEALSECURITY: http://deal-security:8085
      
      # Logging Configuration (from application-prod.yml)
      LOGGIN_LEVEL_ROOT: INFO
      LOGGIN_TECH_JHIPSTER: INFO
      
      # Keycloak OAuth2 Configuration (from application-prod.yml)
      KEYCLOAK_ISSUER_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook
      KEYCLOAK_TOKEN_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook/protocol/openid-connect/token
      
      # Mail Configuration (from application-prod.yml)
      SPRING_MAIL_MAIl_AUTH: true
      SPRING_MAIL_MAIl_TLS: true
      
      # Simplified Configuration - Remove legacy variables that cause issues
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
#      redis:
#        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/management/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5

  # üîí Deal Security Backend
  deal-security:
    image: ghcr.io/skaouech/dealsecurity:latest
    container_name: dealtobook-security-backend
    restart: unless-stopped
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: prod,no-liquibase,no-cache
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/keycloak
      SPRING_DATASOURCE_USERNAME: dealtobook
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-DealToBook2024SecurePassword!}
      SPRING_LIQUIBASE_URL: jdbc:postgresql://postgres:5432/keycloak

      # OAuth2/OIDC Configuration
#      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook
#      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID: dealtobook-app
#      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-dealtobook-secret}
      LOGGIN_DEALTOBOOK_SETTING: INFO
      LOGGIN_DEALTOBOOK_GENERATOR: INFO
      LOGGIN_DEALTOBOOK_SECURITY: INFO
      
      # Monitoring Configuration
      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: true
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      
      # JVM Configuration - Special for deal-security to fix Hazelcast Kubernetes issue
      _JAVA_OPTIONS: -Xmx1536m -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication -Dspring.profiles.active=prod,no-liquibase,no-cache
      JAVA_OPTS: -Dspring.profiles.active=prod,no-liquibase,no-cache -Dmanagement.prometheus.metrics.export.enabled=true -Dliquibase.enabled=false -Dspring.jpa.properties.hibernate.cache.use_second_level_cache=false -Dspring.cache.type=none -Djhipster.cache.hazelcast.enabled=false -Dhazelcast.shutdownhook.enabled=false -Dhazelcast.network.join.kubernetes.enabled=false -Dhazelcast.network.join.kubernetes.namespace= -Dhazelcast.network.join.kubernetes.service-name=
      
      # Application Specific
      JHIPSTER_SLEEP: 10
      HAZELCAST_INSTANCE_NAME: hazelcast-deal
      
      # Override Hazelcast Kubernetes Discovery properties (Spring Boot format)
      # These will be read by @Value annotations in CacheConfiguration2
      HAZELCAST_NETWORK_JOIN_KUBERNETES_ENABLED: "false"
      HAZELCAST_NETWORK_JOIN_KUBERNETES_NAMESPACE: ""
      HAZELCAST_NETWORK_JOIN_KUBERNETES_SERVICE_NAME: ""
      
      # Disable Hibernate Cache (temporary fix)
      SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE: false
      SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_QUERY_CACHE: false
      
      # Disable Hazelcast completely (override application-prod.yml)
      JHIPSTER_CACHE_HAZELCAST_ENABLED: false
      SPRING_CACHE_TYPE: none
      
      # Keycloak Configuration (Legacy format from application-prod.yml)
      KEYCLOAK_REALM: dealtobook
      KEYCLOAK_REALM_PUBLIC_ID: 4c1fa747-87ac-48d4-a4bb-8a5d30651206
      KEYCLOAK_AUTH_SERVER_URL: https://keycloak-dev.dealtobook.com
      KEYCLOAK_CLIENT_ID: dealsecurity
#      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-PNhfRUeloUNMrHMpRosD4HPVVBwWzbkS}
      KEYCLOAK_CLIENT_SECRET: PNhfRUeloUNMrHMpRosD4HPVVBwWzbkS

      # Additional Variables from application-prod.yml
      GOOGLE_RECAPTCHA_SECRET_KEY: 6Ldh7awjAAAAAGnY0joDMaLXv2MEPtCsMb2dNZs2
      EXPIRATION_PROVIDER_NOT-ACTIVE: "0 */2 * ? * *"
      EXPIRATION_PROVIDER_VERIFY-EMAIL: "2"
      EXPIRATION_PROVIDER_VERIFY-EMAIL_UNITY: m
      EXPIRATION_CLIENT_VERIFY-EMAIL: "1"
      EXPIRATION_CLIENT_VERIFY-EMAIL_UNITY: m
      EXPIRATION_PROVIDER_VERIFY-EMAIL_ATTEMPT-NBR: "3"
      EXPIRATION_CLIENT_VERIFY-EMAIL_ATTEMPT-NBR: "3"
      EXPIRATION_CLIENT_NOT-ACTIVE: "0 */2 * ? * *"
      MAIL_BASE_URL: https://administration-dev.dealtobook.com
      
      # AWS Configuration (for deal-setting)
      AWS_BUCKET_NAME: dealtobooktier-dev
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY:-dummy}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY:-dummy}
      
      # Logging Configuration
      LOGGING_LEVEL_ROOT: DEBUG
      LOGGING_LEVEL_COM_DEALTOBOOK_SECURITY: DEBUG
      LOGGING_LEVEL_TECH_JHIPSTER: DEBUG
      
      # Mail Configuration
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST:-localhost}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME:-}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD:-}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:-false}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:-false}
      
      # Microservices URLs (from application-prod.yml)
      SERVER_URL_DEALSETTING: http://deal-setting:8083
      SERVER_URL_DEALGENERATOR: http://deal-generator:8083

      # Logging Configuration (from application-prod.yml)
      LOGGIN_LEVEL_ROOT: INFO
      LOGGIN_TECH_JHIPSTER: INFO

      # Keycloak OAuth2 Configuration (from application-prod.yml)
      KEYCLOAK_ISSUER_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook
      KEYCLOAK_TOKEN_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook/protocol/openid-connect/token
      
      # Mail Configuration (from application-prod.yml)
      SPRING_MAIL_MAIl_AUTH: true
      SPRING_MAIL_MAIl_TLS: true
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_healthy
#      redis:
#        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/management/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5

  # ‚öôÔ∏è Deal Setting Backend
  deal-setting:
    image: ghcr.io/skaouech/dealsetting:latest
    container_name: dealtobook-setting-backend
    restart: unless-stopped
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: prod,no-liquibase,no-cache
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/deal_setting
      SPRING_DATASOURCE_USERNAME: dealtobook
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-DealToBook2024SecurePassword!}
      SPRING_LIQUIBASE_URL: jdbc:postgresql://postgres:5432/deal_setting
      
      # OAuth2/OIDC Configuration
#      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook
#      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID: dealtobook-app
#      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-dealtobook-secret}
      LOGGIN_DEALTOBOOK_SETTING: INFO
      LOGGIN_DEALTOBOOK_GENERATOR: INFO
      LOGGIN_DEALTOBOOK_SECURITY: INFO
      
      # Monitoring Configuration
      MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED: true
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      MANAGEMENT_TRACING_SAMPLING_PROBABILITY: 1.0
      
      # JVM Configuration
      _JAVA_OPTIONS: -Xmx1536m -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication -Dspring.profiles.active=prod,no-liquibase,no-cache
      JAVA_OPTS: -Dspring.profiles.active=prod,no-liquibase,no-cache -Dmanagement.prometheus.metrics.export.enabled=true -Dliquibase.enabled=false -Dspring.jpa.properties.hibernate.cache.use_second_level_cache=false -Dspring.cache.type=none
      
      # Application Specific
      JHIPSTER_SLEEP: 10
      HAZELCAST_INSTANCE_NAME: hazelcast-deal
      
      # Disable Hibernate Cache (temporary fix)
      SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE: false
      SPRING_JPA_PROPERTIES_HIBERNATE_CACHE_USE_QUERY_CACHE: false
      
      # Keycloak Configuration (Legacy format from application-prod.yml)
      KEYCLOAK_REALM: dealtobook
      KEYCLOAK_REALM_PUBLIC_ID: 4c1fa747-87ac-48d4-a4bb-8a5d30651206
      KEYCLOAK_AUTH_SERVER_URL: https://keycloak-dev.dealtobook.com
      KEYCLOAK_CLIENT_ID: dealsetting
#      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-vRtCB3VvR2fX8YI5EtAUDukvQ2gJnoMV}
      KEYCLOAK_CLIENT_SECRET: vRtCB3VvR2fX8YI5EtAUDukvQ2gJnoMV

      # Additional Variables from application-prod.yml
      GOOGLE_RECAPTCHA_SECRET_KEY: 6Ldh7awjAAAAAGnY0joDMaLXv2MEPtCsMb2dNZs2
      EXPIRATION_PROVIDER_NOT-ACTIVE: "0 */2 * ? * *"
      EXPIRATION_PROVIDER_VERIFY-EMAIL: "2"
      EXPIRATION_PROVIDER_VERIFY-EMAIL_UNITY: m
      EXPIRATION_CLIENT_VERIFY-EMAIL: "1"
      EXPIRATION_CLIENT_VERIFY-EMAIL_UNITY: m
      EXPIRATION_PROVIDER_VERIFY-EMAIL_ATTEMPT-NBR: "3"
      EXPIRATION_CLIENT_VERIFY-EMAIL_ATTEMPT-NBR: "3"
      EXPIRATION_CLIENT_NOT-ACTIVE: "0 */2 * ? * *"
      MAIL_BASE_URL: https://administration-dev.dealtobook.com
      
      # AWS Configuration (for deal-setting)
      AWS_BUCKET_NAME: dealtobooktier-dev
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY:-dummy}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY:-dummy}
      
      # Logging Configuration
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_DEALTOBOOK_SETTING: INFO
      LOGGING_LEVEL_TECH_JHIPSTER: INFO
      
      # Mail Configuration
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST:-localhost}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME:-}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD:-}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:-false}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:-false}
      
      # Microservices URLs (from application-prod.yml)
      SERVER_URL_DEALSECURITY: http://deal-security:8085
      SERVER_URL_DEALGENERATOR: http://deal-generator:8083
      SERVER_URL_DEALPAYMENT: http://deal-payment:8084
      
      # Logging Configuration (from application-prod.yml)
      LOGGIN_LEVEL_ROOT: INFO
      LOGGIN_TECH_JHIPSTER: INFO
      
      # Keycloak OAuth2 Configuration (from application-prod.yml)
      KEYCLOAK_ISSUER_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook
      KEYCLOAK_TOKEN_URI: https://keycloak-dev.dealtobook.com/realms/dealtobook/protocol/openid-connect/token
      
      # Mail Configuration (from application-prod.yml)
      SPRING_MAIL_MAIl_AUTH: true
      SPRING_MAIL_MAIl_TLS: true
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
#      redis:
#        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/management/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5

  # üñ•Ô∏è Deal WebUI Frontend (Administration)
  deal-webui:
    image: ghcr.io/skaouech/dealtobook-deal-webui:latest
    container_name: dealtobook-webui-frontend
    restart: unless-stopped
    environment:
      # Angular Environment
      NODE_ENV: production
      ENV: production

      # API Endpoints
      KEYCLOAK_URL: https://keycloak-dev.dealtobook.com
      API_BASE_URL: https://administration-dev.dealtobook.com/api
      
      # Microservices URLs
      DEAL_GENERATOR_URL: http://deal-generator:8083
      DEAL_SECURITY_URL: http://deal-security:8085
      DEAL_SETTING_URL: http://deal-setting:8083
      
      # Keycloak Configuration for env.js substitution
      KEYCLOAK_REALM: dealtobook
      KEYCLOAK_CLIENT_ID: dealweb
      GOOGLE_RECAPTCHA_SITE_KEY: ${GOOGLE_RECAPTCHA_SITE_KEY:-6Ldh7awjAAAAAGnY0joDMaLXv2MEPtCsMb2dNZs2}
      API_GENERATOR_URL: http://deal-generator:8083/api
      API_SECURITY_URL: http://deal-security:8085/api
      API_SETTING_URL: http://deal-setting:8081/api
      
      # Application Info
      APP_NAME: DealToBook WebUI
      APP_VERSION: 1.0.0
      
      # Development Settings
      NG_CLI_ANALYTICS: false
      NODE_OPTIONS: --max_old_space_size=4096
    ports:
      - "4200:4200"
    depends_on:
      - keycloak
      - deal-generator
      - deal-security
      - deal-setting
    networks:
      - dealtobook-network

  # üåê Deal Website Frontend
  deal-website:
    image: ghcr.io/skaouech/dealtobook-deal-website:latest
    container_name: dealtobook-website-frontend
    restart: unless-stopped
    environment:
      # Angular Environment
      NODE_ENV: production
      ENV: production
      
      # API Endpoints
      KEYCLOAK_URL: https://keycloak-dev.dealtobook.com
      API_BASE_URL: https://website-dev.dealtobook.com/api
      
      # Microservices URLs
      DEAL_GENERATOR_URL: http://deal-generator:8083
      DEAL_SECURITY_URL: http://deal-security:8085
      DEAL_SETTING_URL: http://deal-setting:8081
      API_GENERATOR_URL: http://deal-generator:8083/api
      
      # Keycloak Configuration for env.js substitution
      KEYCLOAK_REALM: dealtobook
      KEYCLOAK_CLIENT_ID: dealwebsite
      GOOGLE_RECAPTCHA_SITE_KEY: ${GOOGLE_RECAPTCHA_SITE_KEY:-6Ldh7awjAAAAAGnY0joDMaLXv2MEPtCsMb2dNZs2}
      API_SECURITY_URL: http://deal-security:8085/api
      API_SETTING_URL: http://deal-setting:8081/api
      
      # Application Info
      APP_NAME: DealToBook Website
      APP_VERSION: 1.0.0
      
      # Development Settings
      NG_CLI_ANALYTICS: false
      NODE_OPTIONS: --max_old_space_size=4096
    ports:
      - "4201:4201"
    depends_on:
      - keycloak
      - deal-generator
      - deal-security
      - deal-setting
    networks:
      - dealtobook-network

  # üìä Prometheus Monitoring
#  prometheus:
#    image: prom/prometheus:v2.45.0
#    container_name: dealtobook-prometheus
#    restart: unless-stopped
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/etc/prometheus/console_libraries'
#      - '--web.console.templates=/etc/prometheus/consoles'
#      - '--storage.tsdb.retention.time=200h'
#      - '--web.enable-lifecycle'
#    volumes:
#      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#      - prometheus_data:/prometheus
#    ports:
#      - "9090:9090"
#    networks:
#      - dealtobook-network

  # üìà Grafana Dashboard
#  grafana:
#    image: grafana/grafana:10.0.0
#    container_name: dealtobook-grafana
#    restart: unless-stopped
#    environment:
#      GF_SECURITY_ADMIN_USER: admin
#      GF_SECURITY_ADMIN_PASSWORD: ${admin}
##      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
#      GF_USERS_ALLOW_SIGN_UP: false
#      GF_SERVER_ROOT_URL: https://administration-dev.dealtobook.com:3000
#      GF_ANALYTICS_REPORTING_ENABLED: false
#      GF_ANALYTICS_CHECK_FOR_UPDATES: false
#    volumes:
#      - grafana_data:/var/lib/grafana
#      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
#    ports:
#      - "3000:3000"
#    networks:
#      - dealtobook-network

  # üîç Zipkin Tracing
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: dealtobook-zipkin
    restart: unless-stopped
    environment:
      STORAGE_TYPE: mem
    ports:
      - "9411:9411"
    networks:
      - dealtobook-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
#  redis_data:
#    driver: local
#  prometheus_data:
#    driver: local
#  grafana_data:
#    driver: local
  nginx_logs:
    driver: local

networks:
  dealtobook-network:
    driver: bridge
