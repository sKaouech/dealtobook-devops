name: Build and Push Docker Image

# À copier dans le repo dealtobook-deal_webui
# Adapter les variables selon le service

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'Tag de l''image Docker'
        required: false
        default: 'latest'

env:
  SERVICE_NAME: deal-webui
  GHCR_IMAGE: ghcr.io/skaouech/deal-webui
  NODE_VERSION: '18'
  DOCKERFILE: Dockerfile2  # ou Dockerfile selon le service

jobs:
  build-and-push:
    name: Build ${{ env.SERVICE_NAME }}
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: |
          # Utiliser npm install si package-lock.json n'existe pas
          if [ -f "package-lock.json" ]; then
            echo "📦 package-lock.json trouvé, utilisation de npm ci"
            npm ci
          else
            echo "⚠️  package-lock.json absent, utilisation de npm install"
            npm install --legacy-peer-deps
          fi
      
      - name: 🔨 Build application
        run: npm run build
      
      - name: 🏷️ Determine image tag
        id: tag
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "tag=develop" >> $GITHUB_OUTPUT
          else
            echo "tag=sha-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_IMAGE }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.tag }}
            type=sha,prefix=sha-
            type=ref,event=branch
      
      - name: 🚀 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 📊 Summary
        run: |
          echo "## 🎉 Build Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.GHCR_IMAGE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

